{"version":3,"file":"pag.umd.js","sources":["../src/base/utils/error-map.ts","../src/base/utils/log.ts","../src/codec/types.ts","../src/codec/tags/tag-header.ts","../src/constant.ts","../src/base/color.ts","../src/base/utils/verify.ts","../src/base/composition.ts","../src/base/video-composition.ts","../src/base/ratio.ts","../src/base/point.ts","../src/base/layer.ts","../src/base/mask.ts","../src/codec/data-types.ts","../src/codec/tags/composition-attributes.ts","../src/base/video-frame.ts","../src/base/sequence.ts","../src/base/video-sequence.ts","../src/base/byte-data.ts","../src/codec/context.ts","../src/codec/utils/byte-array.ts","../src/codec/utils/byte-utils.ts","../src/codec/nalu-start-code.ts","../src/codec/tags/video-sequence-tag.ts","../src/codec/tags/video-composition-tag.ts","../src/base/effects/effect.ts","../src/base/time-range.ts","../src/base/vector-composition.ts","../src/base/property.ts","../src/base/transform-2d.ts","../src/base/pre-compose-layer.ts","../src/base/shape-layer.ts","../src/base/solid-layer.ts","../src/base/un-defined-layer.ts","../src/base/keyframe.ts","../src/base/animatable-property.ts","../src/codec/attribute-helper.ts","../src/codec/tags/solid-layer.ts","../src/base/utils/interpolate.ts","../src/base/utils/interpolator.ts","../src/base/keyframes/multi-dimension-point-keyframe.ts","../src/base/keyframes/single-ease-keyframe.ts","../src/codec/attributes.ts","../src/codec/tags/tag-attributes.ts","../src/codec/tags/read-composition-reference.ts","../src/codec/tags/layer-tag.ts","../src/codec/tags/vector-composition-tag.ts","../src/codec/tags/file-tags.ts","../src/pag-codec.ts","../src/base/utils/http-request.ts","../src/file/video-data.ts","../src/file/utils.ts","../src/generator/nalu.ts","../src/generator/exp-golomb.ts","../src/generator/h264-parser.ts","../src/generator/mp4-generator.ts","../src/generator/h264-remuxer.ts","../src/pag-generator.ts","../src/pag-file.ts","../src/view/types.ts","../src/view/utils.ts","../src/view/shader.ts","../src/base/utils/event-manager.ts","../src/pag-view.ts"],"sourcesContent":["export enum ErrorCode {\n  InputError,\n  LoadFileByXhrError,\n  LoadFileNotResponse,\n  ReadPagFileError,\n  PagFileLengthErrorTooShort,\n  InvalidPagFileHeader,\n  NotByteArray,\n  PagCodecError,\n  ReadStartCodeError,\n  NotPagFile,\n  NotVideoData,\n  NotMp4File,\n  NotSequence,\n  NotNalu,\n  NotFrames,\n  NotPayloadOnRemuxer,\n  NotSupportMSE,\n  NotSupportMultipleSequence,\n  PagDestroyed,\n  InvalidPercentage,\n  WriteFileFile,\n}\n\nexport const ErrorMap = {\n  [ErrorCode.InputError]: '请URL或者上传的PAG文件是否正确！',\n  [ErrorCode.LoadFileByXhrError]: '加载PAG文件网络请求错误！',\n  [ErrorCode.LoadFileNotResponse]: '加载PAG文件内容为空!',\n  [ErrorCode.ReadPagFileError]: '读取PAG文件错误！',\n  [ErrorCode.PagFileLengthErrorTooShort]: 'PAG文件长度太短!',\n  [ErrorCode.InvalidPagFileHeader]: '无效的PAG文件头部!',\n  [ErrorCode.NotByteArray]: '文件中字节流不存在!',\n  [ErrorCode.PagCodecError]: 'PAG解码错误!',\n  [ErrorCode.ReadStartCodeError]: '读取StartCode错误!',\n  [ErrorCode.NotPagFile]: 'PAG文件不存在！',\n  [ErrorCode.NotVideoData]: 'VideoData不存在！',\n  [ErrorCode.NotMp4File]: 'MP4文件不存在！',\n  [ErrorCode.NotSequence]: '视频序列帧不存在！',\n  [ErrorCode.NotNalu]: '视频序列帧上Nalu不存在！',\n  [ErrorCode.NotFrames]: '视频序列帧上Frame不存在！',\n  [ErrorCode.NotPayloadOnRemuxer]: 'Remuxer上不存在Payload！',\n  [ErrorCode.NotSupportMSE]: '浏览器不支持MediaSourceExtension！',\n  [ErrorCode.NotSupportMultipleSequence]: '暂不支持多sequence的PAG文件！',\n  [ErrorCode.PagDestroyed]: '该PAG已经销毁！',\n  [ErrorCode.InvalidPercentage]: '无效百分比!',\n  [ErrorCode.WriteFileFile]: '写入文件失败',\n};\n","import { ErrorCode, ErrorMap } from './error-map';\n\nexport class Log {\n  public static log(message) {\n    console.log(message);\n  }\n  public static error(errorCode: ErrorCode) {\n    throw new Error(ErrorMap[errorCode]);\n  }\n}\n","export const enum CompositionType {\n  Unknown,\n  Vector,\n  Bitmap,\n  Video,\n}\n\nexport const enum TagCode {\n  End = 0,\n  FontTables = 1,\n  VectorCompositionBlock = 2,\n  CompositionAttributes = 3,\n  ImageTables = 4,\n  LayerBlock = 5,\n  LayerAttributes = 6,\n  SolidColor = 7,\n  TextSource = 8,\n  TextPathOption = 9,\n  TextMoreOption = 10,\n  ImageReference = 11,\n  CompositionReference = 12,\n  Transform2D = 13,\n  MaskBlock = 14,\n  ShapeGroup = 15,\n  Rectangle = 16,\n  Ellipse = 17,\n  PolyStar = 18,\n  ShapePath = 19,\n  Fill = 20,\n  Stroke = 21,\n  GradientFill = 22,\n  GradientStroke = 23,\n  MergePaths = 24,\n  TrimPaths = 25,\n  Repeater = 26,\n  RoundCorners = 27,\n  Performance = 28,\n  DropShadowStyle = 29,\n  InnerShadowStyle = 30,\n  OuterGlowStyle = 31,\n  InnerGlowStyle = 32,\n  BevelAndEmbossStyle = 33,\n  SatinStyle = 34,\n  ColorOverlayStyle = 35,\n  GradientOverlayStyle = 36,\n  StrokeStyle = 37,\n  TintEffect = 38,\n  FillEffect = 39,\n  StrokeEffect = 40,\n  TritoneEffect = 41,\n  DropShadowEffect = 42,\n  RadialWipeEffect = 43,\n  DisplacementMapEffect = 44,\n  BitmapCompositionBlock = 45,\n  BitmapSequence = 46,\n  ImageBytes = 47,\n  ImageBytes2 = 48,\n  ImageBytes3 = 49,\n  VideoCompositionBlock = 50,\n  VideoSequence = 51,\n  LayerAttributesV2 = 52,\n  // add new tags here...\n  Count,\n}\n","import { TagCode } from '../types';\nimport { ByteArray } from '../utils/byte-array';\n\nexport interface TagHeader {\n  code: TagCode;\n  length: number;\n}\n\nexport const readTagHeader = (byteBuffer: ByteArray): TagHeader => {\n  const codeAndLength: number = byteBuffer.readUint16();\n  let length: number = (codeAndLength & 63) >>> 0;\n  const code: number = codeAndLength >> 6;\n  if (length === 63) {\n    length = byteBuffer.readUint32();\n  }\n  if (byteBuffer.context.tagLevel < code) {\n    byteBuffer.context.tagLevel = code;\n  }\n  return { code, length };\n};\n\nexport function readTags<T>(byteArray: ByteArray, parameter: T, reader: Function) {\n  let header = readTagHeader(byteArray);\n  while (header.code !== TagCode.End) {\n    const tagBytes = byteArray.readBytes(header.length);\n    reader(tagBytes, header.code, parameter);\n    if (byteArray.context.tagLevel < tagBytes.context.tagLevel) {\n      byteArray.context.tagLevel = tagBytes.context.tagLevel;\n    }\n    header = readTagHeader(byteArray);\n  }\n}\n","export const ZERO_ID = 0;\nexport const ZERO_TIME = 0;\nexport const OPAQUE = 255;\nexport const TRANSPARENT = 0;\n\n// 混合模式\nexport const enum BlendMode {\n  Normal = 0,\n  Multiply = 1,\n  Screen = 2,\n  Overlay = 3,\n  Darken = 4,\n  Lighten = 5,\n  ColorDodge = 6,\n  ColorBurn = 7,\n  HardLight = 8,\n  SoftLight = 9,\n  Difference = 10,\n  Exclusion = 11,\n  Hue = 12,\n  Saturation = 13,\n  Color = 14,\n  Luminosity = 15,\n\n  // modes used only when rendering.\n  DestinationIn = 21,\n  DestinationOut = 22,\n  DestinationATop = 23,\n  SourceIn = 24,\n  SourceOut = 25,\n  Xor = 26,\n}\n\n// 路径动作\nexport const enum PathVerb {\n  MoveTo,\n  LineTo,\n  CurveTo,\n  Close,\n}\n\n// 关键帧的差值器类型\nexport const enum KeyframeInterpolationType {\n  None = 0,\n  Linear = 1,\n  Bezier = 2,\n  Hold = 3,\n}\n\n// 段落对齐\nexport const enum ParagraphJustification {\n  LeftJustify = 0,\n  CenterJustify = 1,\n  RightJustify = 2,\n  FullJustifyLastLineLeft = 3,\n  FullJustifyLastLineRight = 4,\n  FullJustifyLastLineCenter = 5,\n  FullJustifyLastLineFull = 6,\n}\n","export interface Color {\n  red: number; // in the range [0 - 255]\n  green: number;\n  blue: number;\n}\n\nexport const Black: Color = { red: 0, green: 0, blue: 0 };\nexport const White: Color = { red: 255, green: 255, blue: 255 };\nexport const Red: Color = { red: 255, green: 0, blue: 0 };\nexport const Green: Color = { red: 0, green: 255, blue: 0 };\nexport const Blue: Color = { red: 0, green: 0, blue: 255 };\n","import { Log } from './log';\n\nexport const verifyFailed = () => {\n  Log.log('PAG Verify Failed!');\n};\n\nexport const verifyAndrReturn = (expression): boolean => {\n  if (expression) {\n    return true;\n  }\n  Log.log('PAG Verify Failed!');\n  return false;\n};\n","import { ZERO_ID, ZERO_TIME } from '../constant';\nimport { Color, White } from './color';\nimport { CompositionType } from '../codec/types';\nimport { TimeRange } from './time-range';\nimport { verifyAndrReturn } from './utils/verify';\n\nexport class Composition {\n  private static cacheIDCount = 1;\n\n  /**\n   * A unique identifier for this item.\n   */\n  public id: number = ZERO_ID;\n  /**\n   * The width of the Composition.\n   */\n  public width = 0;\n  /**\n   * The height of the item.\n   */\n  public height = 0;\n  /**\n   * The total duration of the item.\n   */\n  public duration: number = ZERO_TIME;\n  /**\n   * The frame rate of the Composition.\n   */\n  public frameRate = 30;\n  /**\n   * The background color of the composition.\n   */\n  public backgroundColor: Color = White;\n  public cacheID = 0;\n\n  public constructor() {\n    this.cacheID = Composition.cacheIDCount;\n    Composition.cacheIDCount += 1;\n  }\n\n  /**\n   * The type of the Composition.\n   */\n  public type(): CompositionType {\n    return CompositionType.Unknown;\n  }\n\n  /**\n   * Returns the static time ranges of this composition.\n   */\n  public getStaticTimeRanges(): Array<TimeRange> {\n    return undefined;\n  }\n\n  public verify(): boolean {\n    return verifyAndrReturn(this.width > 0 && this.height > 0 && this.duration > 0 && this.frameRate > 0);\n  }\n}\n","import { Composition } from './composition';\nimport { CompositionType } from '../codec/types';\nimport { TimeRange } from './time-range';\nimport { VideoSequence } from './video-sequence';\nimport { verifyFailed } from './utils/verify';\n\nexport class VideoComposition extends Composition {\n  public hasAlpha = false;\n  public sequences: Array<VideoSequence> = [];\n\n  private staticTimeRanges: Array<TimeRange> = [];\n  private staticTimeRangeUpdated = false;\n\n  public type(): CompositionType {\n    return CompositionType.Video;\n  }\n\n  public getStaticTimeRanges(): Array<TimeRange> {\n    if (!this.staticTimeRangeUpdated) {\n      this.staticTimeRangeUpdated = true;\n      this.updateStaticTimeRanges();\n    }\n    return this.staticTimeRanges;\n  }\n\n  public updateStaticTimeRanges(): void {\n    if (this.duration <= 1) return;\n    if (this.sequences.length > 0) {\n      let sequence = this.sequences[0];\n      for (let i = 1; i < this.sequences.length; i++) {\n        const item = this.sequences[i];\n        if (item.frameRate > sequence.frameRate) sequence = item;\n      }\n      const timeScale = this.frameRate / sequence.frameRate;\n      for (const timeRange of sequence.staticTimeRanges) {\n        timeRange.start = Math.round(timeRange.start * timeScale);\n        timeRange.end = Math.round(timeRange.end * timeScale);\n        this.staticTimeRanges.push(timeRange);\n      }\n    } else {\n      const range: TimeRange = { start: 0, end: this.duration - 1 };\n      this.staticTimeRanges.push(range);\n    }\n  }\n\n  public hasImageContent(): boolean {\n    return true;\n  }\n\n  public verify(): boolean {\n    if (!super.verify() || this.sequences.length <= 0) {\n      verifyFailed();\n      return false;\n    }\n    for (const sequence of this.sequences) {\n      if (!sequence || !sequence.verify()) {\n        verifyFailed();\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","export class Ratio {\n  public numerator = 1;\n  public denominator = 1;\n\n  constructor(numerator: number, denominator: number) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public value(): number {\n    return this.numerator / this.denominator;\n  }\n}\n\nexport const DefaultRatio = new Ratio(1, 1);\n","export class Point {\n  public x: number;\n  public y: number;\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport const ZERO_POINT = new Point(0, 0);\n","import { TimeRange } from './time-range';\nimport { VectorComposition } from './vector-composition';\nimport { Ratio, DefaultRatio } from './ratio';\nimport { BlendMode, ZERO_ID, ZERO_TIME } from '../constant';\nimport { Transform2D } from './transform-2d';\nimport { Property } from './property';\nimport { Mask } from './mask';\nimport { Effect } from './effects/effect';\nimport { Point } from './point';\nimport { verifyFailed } from './utils/verify';\nimport { AnimatableProperty } from './animatable-property';\n\nexport const enum LayerStyleType {\n  Unknown,\n  DropShadow,\n  Stroke,\n}\n\nexport class LayerStyle {\n  public type(): LayerStyleType {\n    return LayerStyleType.Unknown;\n  }\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_time: number): void {}\n\n  public verify(): boolean {\n    return false;\n  }\n}\n\nexport const enum TrackMatteType {\n  None = 0,\n  Alpha = 1,\n  AlphaInverted = 2,\n  Luma = 3,\n  LumaInverted = 4,\n}\n\nexport const enum LayerType {\n  Unknown,\n  undefined,\n  Solid,\n  Text,\n  Shape,\n  Image,\n  PreCompose,\n}\n\nexport class Layer {\n  /**\n   * Te id of the layer.\n   */\n  public id = 0;\n  /**\n   * The parent of this layer.\n   */\n  public parent: Layer = undefined; // layer reference\n\n  public containingComposition: VectorComposition = undefined; // composition reference\n\n  /**\n   * The time stretch percentage of the layer.\n   */\n  public stretch: Ratio = DefaultRatio;\n  /**\n   * The start time of the layer, indicates the start position of the visible range. It could be a negative value.\n   */\n  startTime: number = ZERO_ID;\n  /**\n   * The duration of the layer, indicates the length of the visible range.\n   */\n  public duration: number = ZERO_TIME;\n  /**\n   * When true, the layer' automatic orientation is enabled.\n   */\n  public autoOrientation = false;\n  /**\n   * The transformation of the layer.\n   */\n  public transform: Transform2D = undefined;\n  /**\n   * When false, the layer should be skipped during the rendering loop.\n   */\n  public isActive = true;\n  /**\n   * The blending mode of the layer.\n   */\n  public blendMode: BlendMode = BlendMode.Normal;\n  /**\n   * If layer has a track matte, specifies the way it is applied.\n   */\n  public trackMatteType: TrackMatteType = TrackMatteType.None;\n  public trackMatteLayer: Layer = undefined;\n  public timeRemap: Property<number> = undefined;\n  public masks: Array<Mask> = undefined;\n  public effects: Array<Effect> = undefined;\n  public layerStyles: Array<LayerStyle> = undefined;\n\n  public layerCache: Cache = undefined;\n\n  private maxScale: Point = undefined;\n\n  public type(): LayerType {\n    return LayerType.Unknown;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    this.transform.excludeVaryingRanges(timeRanges);\n    if (this.timeRemap !== undefined) {\n      this.timeRemap.excludeVaryingRanges(timeRanges);\n    }\n    if (this.masks !== undefined) {\n      for (const mask of this.masks) {\n        mask.excludeVaryingRanges(timeRanges);\n      }\n    }\n    if (this.effects !== undefined && this.effects.length > 0) {\n      for (const effect of this.effects) {\n        effect.excludeVaryingRanges(timeRanges);\n      }\n    }\n    if (this.layerStyles !== undefined && this.layerStyles.length > 0) {\n      for (const layerStyle of this.layerStyles) {\n        layerStyle.excludeVaryingRanges(timeRanges);\n      }\n    }\n  }\n\n  public gotoFrame(frame: number): void {\n    this.transform.gotoFrame(frame);\n    if (this.timeRemap !== undefined) {\n      this.timeRemap.gotoFrame(frame);\n    }\n    if (this.masks !== undefined && this.masks.length > 0) {\n      for (const mask of this.masks) {\n        mask.gotoFrame(frame);\n      }\n    }\n    if (this.effects !== undefined && this.effects.length > 0) {\n      for (const effect of this.effects) {\n        effect.gotoFrame(frame);\n      }\n    }\n    if (this.layerStyles !== undefined && this.layerStyles.length > 0) {\n      for (const layerStyle of this.layerStyles) {\n        layerStyle.gotoFrame(frame);\n      }\n    }\n  }\n\n  public verify(): boolean {\n    if (!this.containingComposition || this.duration <= 0 || !this.transform) {\n      verifyFailed();\n      return false;\n    }\n    if (!this.transform.verify()) {\n      verifyFailed();\n      return false;\n    }\n    if (this.masks && this.masks.length > 0) {\n      for (const mask of this.masks) {\n        if (!mask || !mask.verify()) {\n          verifyFailed();\n          return false;\n        }\n      }\n    }\n\n    if (this.layerStyles && this.layerStyles.length > 0) {\n      for (const layerStyle of this.layerStyles) {\n        if (!layerStyle || !layerStyle.verify()) {\n          verifyFailed();\n          return false;\n        }\n      }\n    }\n\n    if (this.effects && this.effects.length > 0) {\n      for (const effect of this.effects) {\n        if (!effect || !effect.verify()) {\n          verifyFailed();\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public getMaxScaleFactor(): Point {\n    if (this.maxScale !== undefined) {\n      return this.maxScale;\n    }\n    this.maxScale = new Point(1, 1);\n    const property = this.transform.scale;\n    if (property.animatable()) {\n      const { keyframes } = property as AnimatableProperty<Point>;\n      let scaleX = Math.abs(keyframes[0].startValue.x);\n      let scaleY = Math.abs(keyframes[0].startValue.y);\n      if (keyframes !== undefined && keyframes.length > 0) {\n        for (const keyframe of keyframes) {\n          const x = Math.abs(keyframe.endValue.x);\n          const y = Math.abs(keyframe.endValue.y);\n          if (scaleX < x) {\n            scaleX = x;\n          }\n          if (scaleY < y) {\n            scaleY = y;\n          }\n        }\n      }\n      this.maxScale.x = scaleX;\n      this.maxScale.y = scaleY;\n    } else {\n      this.maxScale.x = Math.abs(property.value.x);\n      this.maxScale.y = Math.abs(property.value.y);\n    }\n    if (this.parent !== undefined) {\n      const parentScale = this.parent.getMaxScaleFactor();\n      this.maxScale.x *= parentScale.x;\n      this.maxScale.y *= parentScale.y;\n    }\n    return this.maxScale;\n  }\n}\n","import { ZERO_ID } from '../constant';\nimport { Path } from './path';\nimport { Property } from './property';\nimport { TimeRange } from './time-range';\n\nexport const enum MaskMode {\n  None = 0,\n  Add = 1,\n  Subtract = 2,\n  Intersect = 3,\n  Lighten = 4,\n  Darken = 5,\n  Difference = 6,\n  Accum = 7,\n}\n\nexport class Mask {\n  public id: number = ZERO_ID;\n  public inverted = false;\n  public maskMode: MaskMode.None;\n  public maskPath: Property<Path> = undefined;\n  public maskOpacity: Property<number> = undefined;\n  public maskExpansion: Property<number> = undefined;\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_frame: number): void {}\n\n  public verify(): boolean {\n    return false;\n  }\n}\n","import { Color } from '../base/color';\nimport { Composition } from '../base/composition';\nimport { Ratio } from '../base/ratio';\nimport { ByteArray } from './utils/byte-array';\nimport { Point } from '../base/point';\nimport { Layer } from '../base/layer';\nimport { Mask } from '../base/mask';\n\nexport const SPATIAL_PRECISION = 0.05;\nexport const BEZIER_PRECISION = 0.005;\n\nexport const readRatio = (byteArray: ByteArray): Ratio => {\n  const numeratorValue: number = byteArray.readEncodeInt32();\n  const denominatorValue: number = byteArray.readEncodedUint32();\n  const ration: Ratio = new Ratio(numeratorValue, denominatorValue);\n  return ration;\n};\n\nexport const readColor = (byteArray: ByteArray): Color => {\n  const redNum: number = byteArray.readUint8();\n  const greenNum: number = byteArray.readUint8();\n  const blueNum: number = byteArray.readUint8();\n  const color: Color = { red: redNum, green: greenNum, blue: blueNum };\n  return color;\n};\n\nexport const readTime = (byteArray: ByteArray): number => byteArray.readEncodedUint64();\n\nexport const readFloat = (byteArray: ByteArray): number => byteArray.readFloat32();\n\nexport const readBoolean = (byteArray: ByteArray): boolean => byteArray.readBitBoolean();\n\nexport const readEnum = (byteArray: ByteArray): number => byteArray.readUint8();\n\nexport const readID = (byteArray: ByteArray): number => byteArray.readEncodedUint32();\n\nexport const readLayerID = (byteArray: ByteArray): Layer => {\n  const id: number = byteArray.readEncodedUint32();\n  if (id > 0) {\n    const layer: Layer = new Layer();\n    layer.id = id;\n    return layer;\n  }\n  return undefined;\n};\n\nexport const readMaskID = (byteArray: ByteArray): Mask => {\n  const id: number = byteArray.readEncodedUint32();\n  if (id > 0) {\n    const mask: Mask = new Mask();\n    mask.id = id;\n    return mask;\n  }\n  return undefined;\n};\n\nexport const readCompositionID = (byteArray: ByteArray): Composition => {\n  const id: number = byteArray.readEncodedUint32();\n  if (id > 0) {\n    const composition: Composition = new Composition();\n    composition.id = id;\n    return composition;\n  }\n  return undefined;\n};\n\nexport const readString = (byteArray: ByteArray): string => byteArray.readUTF8String();\n\nexport function ReadOpacity(byteArray: ByteArray): number {\n  return byteArray.readUint8();\n}\n\nexport const readPoint = (byteArray: ByteArray): Point => {\n  const x: number = byteArray.readFloat32();\n  const y: number = byteArray.readFloat32();\n  return new Point(x, y);\n};\n","import { Composition } from '../../base/composition';\nimport { readColor, readTime } from '../data-types';\nimport { ByteArray } from '../utils/byte-array';\n\nexport const readCompositionAttributes = (byteArray: ByteArray, composition: Composition) => {\n  composition.width = byteArray.readEncodeInt32();\n  composition.height = byteArray.readEncodeInt32();\n  composition.duration = readTime(byteArray);\n  composition.frameRate = byteArray.readFloat32();\n  composition.backgroundColor = readColor(byteArray);\n};\n","import { ByteData } from './byte-data';\n\nexport class VideoFrame {\n  public isKeyframe = false;\n  public frame = 0;\n  public fileBytes: ByteData = undefined;\n}\n","import { Composition } from './composition';\nimport { verifyAndrReturn } from './utils/verify';\n\nexport class Sequence {\n  public composition: Composition = undefined;\n  public id = 0;\n  public width = 0;\n  public height = 0;\n  public frameRate = 0;\n  public frameCount = 0;\n  public isKeyFrameFlags: Array<boolean> = [];\n\n  public verify() {\n    return verifyAndrReturn(this.composition !== undefined && this.width > 0 && this.height > 0 && this.frameRate > 0);\n  }\n}\n","import { ByteData } from './byte-data';\nimport { Sequence } from './sequence';\nimport { TimeRange } from './time-range';\nimport { verifyFailed } from './utils/verify';\nimport { VideoFrame } from './video-frame';\n\nexport class VideoSequence extends Sequence {\n  public alphaStartX = 0;\n  public alphaStartY = 0;\n  public frames: Array<VideoFrame> = [];\n  public headers: Array<ByteData> = [];\n  public staticTimeRanges: Array<TimeRange> = [];\n\n  public verify(): boolean {\n    if (!super.verify() || this.frames.length <= 0) {\n      verifyFailed();\n      return false;\n    }\n    for (const frame of this.frames) {\n      if (!frame && !frame.fileBytes) {\n        verifyFailed();\n        return false;\n      }\n    }\n    for (const header of this.headers) {\n      if (!header) {\n        verifyFailed();\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { ByteArray } from '../codec/utils/byte-array';\n\nexport class ByteData {\n  public data: ByteArray = undefined;\n  public length = 0;\n\n  constructor(data: ByteArray, length: number) {\n    this.data = data;\n    this.length = length;\n  }\n}\n","import { Composition } from '../base/composition';\nimport { ImageBytes } from '../base/image-bytes';\n\nexport class Context {\n  public tagLevel = 0;\n  public compositions: Array<Composition> = [];\n  public images: Array<ImageBytes> = [];\n\n  private errorMessages: string[] = [];\n\n  public throwException(message: string) {\n    this.errorMessages.push(message);\n  }\n\n  public releaseCompositions(): Array<Composition> {\n    const compositions = this.compositions.slice();\n    this.compositions = undefined;\n    return compositions;\n  }\n\n  public releaseImages(): Array<ImageBytes> {\n    const images = this.images.slice();\n    this.images = undefined;\n    return images;\n  }\n}\n","import { ErrorCode } from '../../base/utils/error-map';\nimport { Log } from '../../base/utils/log';\nimport { Context } from '../context';\n\nconst LENGTH_FOR_STORE_NUM_BITS = 5;\n\nexport class ByteArray {\n  public context: Context;\n\n  private readonly littleEndian: boolean;\n  private dataView: DataView;\n  private position = 0;\n  private bitPosition = 0;\n\n  constructor(buffer: ArrayBuffer, littleEndian?: boolean) {\n    this.dataView = new DataView(buffer);\n    this.littleEndian = !!littleEndian;\n    this.context = new Context();\n  }\n\n  public get length(): number {\n    return this.dataView.byteLength;\n  }\n\n  public get bytesAvailable(): number {\n    return this.dataView.byteLength - this.position;\n  }\n\n  public data(): ArrayBuffer {\n    return this.dataView.buffer;\n  }\n\n  public get postion(): number {\n    return this.position;\n  }\n\n  public alignWithBytes() {\n    this.bitPosition = this.position * 8;\n  }\n\n  public readBoolean(): boolean {\n    const value = this.dataView.getInt8(this.position);\n    this.position += 1;\n    this.positonChangend();\n    return Boolean(value);\n  }\n\n  public readChar(): string {\n    if (this.position >= this.length) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getInt8(this.position);\n    this.position += 1;\n    this.positonChangend();\n    return String.fromCharCode(value);\n  }\n\n  public readUint8(): number {\n    if (this.position >= this.length) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getUint8(this.position);\n    this.position += 1;\n    this.positonChangend();\n    return value;\n  }\n\n  public readInt8(): number {\n    if (this.position >= this.length) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getInt8(this.position);\n    this.position += 1;\n    this.positonChangend();\n    return value;\n  }\n\n  public readInt16(): number {\n    if (this.position >= this.length - 1) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getInt16(this.position, this.littleEndian);\n    this.position += 2;\n    this.positonChangend();\n    return value;\n  }\n\n  public readUint16(): number {\n    if (this.position >= this.length - 1) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getUint16(this.position, this.littleEndian);\n    this.position += 2;\n    this.positonChangend();\n    return value;\n  }\n\n  public readInt24(): number {\n    if (this.position >= this.length - 2) Log.error(ErrorCode.PagCodecError);\n    const left = this.dataView.getInt16(this.position, this.littleEndian);\n    const right = this.dataView.getInt8(this.position + 2);\n    this.position += 3;\n    this.positonChangend();\n    return this.littleEndian ? left + 2 ** 16 * right : 2 ** 16 * left + right;\n  }\n\n  public readUint24(): number {\n    if (this.position >= this.length - 2) Log.error(ErrorCode.PagCodecError);\n    const left = this.dataView.getUint16(this.position, this.littleEndian);\n    const right = this.dataView.getUint8(this.position + 2);\n    this.position += 3;\n    this.positonChangend();\n    return this.littleEndian ? left + 2 ** 16 * right : 2 ** 16 * left + right;\n  }\n\n  public readInt32(): number {\n    if (this.position >= this.length - 3) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getInt32(this.position, this.littleEndian);\n    this.position += 4;\n    this.positonChangend();\n    return value;\n  }\n\n  public readUint32(): number {\n    if (this.position >= this.length - 3) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getUint32(this.position, this.littleEndian);\n    this.position += 4;\n    this.positonChangend();\n    return value;\n  }\n\n  public readInt64(): number {\n    if (this.position >= this.length - 7) Log.error(ErrorCode.PagCodecError);\n    const left = this.dataView.getInt32(this.position, this.littleEndian);\n    const right = this.dataView.getInt32(this.position + 4, this.littleEndian);\n    this.position += 8;\n    this.positonChangend();\n    return this.littleEndian ? left + 2 ** 32 * right : 2 ** 32 * left + right;\n  }\n\n  public readUint64(): number {\n    if (this.position >= this.length - 7) Log.error(ErrorCode.PagCodecError);\n    const left = this.dataView.getUint32(this.position, this.littleEndian);\n    const right = this.dataView.getUint32(this.position + 4, this.littleEndian);\n    this.position += 8;\n    this.positonChangend();\n    return this.littleEndian ? left + 2 ** 32 * right : 2 ** 32 * left + right;\n  }\n\n  public readFloat32(): number {\n    if (this.position >= this.length - 3) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getFloat32(this.position, this.littleEndian);\n    this.position += 4;\n    this.positonChangend();\n    return value;\n  }\n\n  public readDouble(): number {\n    if (this.position >= this.length - 7) Log.error(ErrorCode.PagCodecError);\n    const value = this.dataView.getFloat64(this.position, this.littleEndian);\n    this.position += 8;\n    this.positonChangend();\n    return value;\n  }\n\n  public readUTF8String(): string {\n    if (this.position >= this.length) Log.error(ErrorCode.PagCodecError);\n    let encoded = '';\n    let dataLength = 0;\n    for (let i = this.position; i < this.length; i++) {\n      if (this.dataView.getUint8(i) === 0) {\n        break;\n      }\n      encoded += `%${this.dataView.getUint8(i).toString(16)}`;\n      dataLength += 1;\n    }\n    this.position += dataLength;\n    this.positonChangend();\n    return decodeURIComponent(encoded);\n  }\n\n  public readEncodedUint32(): number {\n    const valueMask = 127;\n    const hasNext = 128;\n    let value = 0;\n    let byte = 0;\n    for (let i = 0; i < 32; i += 7) {\n      if (this.position >= this.length) {\n        throw Error('readEncodedUint32 End of file was encountered.');\n        break;\n      }\n      byte = this.dataView.getUint8(this.position);\n      this.position += 1;\n      value |= (byte & valueMask) << i;\n      if ((byte & hasNext) === 0) {\n        break;\n      }\n    }\n    this.positonChangend();\n    return value;\n  }\n\n  public readEncodeInt32(): number {\n    const data = this.readEncodedUint32();\n    const value = data >> 1;\n    return (data & 1) > 0 ? -value : value;\n  }\n\n  public readEncodedUint64(): number {\n    const valueMask = 127;\n    const hasNext = 128;\n    let value = 0;\n    let byte = 0;\n    for (let i = 0; i < 64; i += 7) {\n      if (this.position >= this.length) {\n        throw Error('readEncodedUint64 End of file was encountered.');\n        break;\n      }\n      byte = this.dataView.getUint8(this.position);\n      this.position += 1;\n      value |= (byte & valueMask) << i;\n      if ((byte & hasNext) === 0) {\n        break;\n      }\n    }\n    this.positonChangend();\n    return value;\n  }\n\n  public readEncodeInt64(): number {\n    const data = this.readEncodedUint64();\n    const value = data << 0;\n    return (data & 1) > 0 ? -value : value;\n  }\n\n  public readBytes(length?: number): ByteArray {\n    if (!length || length <= 0) {\n      length = this.length - this.position;\n    }\n    if (this.position > this.length - length) Log.error(ErrorCode.PagCodecError);\n    const newBuffer = this.dataView.buffer.slice(this.position, this.position + length);\n    this.position += length;\n    this.positonChangend();\n    return new ByteArray(newBuffer, this.littleEndian);\n  }\n\n  public readUBits(numBits: number): number {\n    const bitMasks: number[] = [0, 1, 3, 7, 15, 31, 63, 127, 255];\n    let value = 0;\n    if (this.bitPosition > this.length * 8 - numBits) Log.error(ErrorCode.PagCodecError);\n    let pos = 0;\n    while (pos < numBits) {\n      const bytePosition = Math.floor(this.bitPosition * 0.125);\n      const bitPosition = this.bitPosition % 8;\n      let byte = this.dataView.getUint8(bytePosition) >> bitPosition;\n      const bitLength = Math.min(8 - bitPosition, numBits - pos);\n      byte &= bitMasks[bitLength];\n      value |= byte << pos;\n      pos += bitLength;\n      this.bitPosition += bitLength;\n    }\n    this.bitPositionChanged();\n    return value;\n  }\n\n  public readBits(numBits: number): number {\n    let value = this.readUBits(numBits);\n    value <<= 32 - numBits;\n    const data = value << 0;\n    return data >> (32 - numBits);\n  }\n\n  public readNumBits(): number {\n    return this.readUBits(LENGTH_FOR_STORE_NUM_BITS) + 1;\n  }\n\n  public readInt32List(count: number): number[] {\n    const numBits = this.readNumBits();\n    const value = new Array(count);\n    for (let i = 0; i < count; i++) {\n      value[i] = this.readBits(numBits);\n    }\n    return value;\n  }\n\n  public readUint32List(count: number): number[] {\n    const numBits = this.readNumBits();\n    const value = new Array(count);\n    for (let i = 0; i < count; i++) {\n      value[i] = this.readUBits(numBits);\n    }\n    return value;\n  }\n\n  public readBitBoolean() {\n    return this.readUBits(1) !== 0;\n  }\n\n  public readFloatList(count: number, percision: number): number[] {\n    const numBits = this.readNumBits();\n    const value = new Array(count);\n    for (let i = 0; i < count; i++) {\n      value[i] = this.readBits(numBits) * percision;\n    }\n    return value;\n  }\n\n  private bitPositionChanged() {\n    this.position = Math.ceil(this.bitPosition * 0.125);\n  }\n\n  private positonChangend() {\n    this.bitPosition = this.position * 8;\n  }\n}\n","export const memcpy = (dst: ArrayBuffer, dstOffset: number, src: ArrayBuffer, srcOffset: number, num: number) => {\n  if (\n    dstOffset >= dst.byteLength ||\n    srcOffset >= src.byteLength ||\n    src.byteLength - srcOffset > dst.byteLength - dstOffset ||\n    num > src.byteLength\n  )\n    return;\n  const dstUint8Array = new Uint8Array(dst);\n  const srcUint8Array = new Uint8Array(src, srcOffset, num);\n  dstUint8Array.set(srcUint8Array, dstOffset);\n};\n\nexport const concatArrayBuffers2Uint8Array = (arrays: Array<ArrayBuffer>) => {\n  const uint8Arrays = arrays.map((arr) => new Uint8Array(arr));\n  return concatUint8Arrays(uint8Arrays);\n};\n\nexport const concatUint8Arrays = (arrays: Array<Uint8Array>) => {\n  let totalLength = 0;\n  for (const arr of arrays) {\n    totalLength += arr.byteLength;\n  }\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.byteLength;\n  }\n  return result;\n};\n","import { ByteData } from '../base/byte-data';\nimport { ErrorCode } from '../base/utils/error-map';\nimport { Log } from '../base/utils/log';\nimport { ByteArray } from './utils/byte-array';\nimport { memcpy } from './utils/byte-utils';\n\nexport const readByteDataWithStartCode = (byteArray: ByteArray) => {\n  const length = byteArray.readEncodedUint32();\n  const bytes = byteArray.readBytes(length);\n  if (length === 0) Log.error(ErrorCode.ReadStartCodeError);\n  const data = new ArrayBuffer(length + 4);\n  memcpy(data, 4, bytes.data(), 0, length);\n  const dataView = new DataView(data);\n  dataView.setUint8(0, 0);\n  dataView.setUint8(1, 0);\n  dataView.setUint8(2, 0);\n  dataView.setUint8(3, 1);\n  return new ByteData(new ByteArray(data), length + 4);\n};\n","import { TimeRange } from '../../base/time-range';\nimport { VideoFrame } from '../../base/video-frame';\nimport { VideoSequence } from '../../base/video-sequence';\nimport { readTime } from '../data-types';\nimport { readByteDataWithStartCode } from '../nalu-start-code';\nimport { ByteArray } from '../utils/byte-array';\n\nexport const readVideoSequence = (byteArray: ByteArray, hasAlpha: boolean): VideoSequence => {\n  const videoSequence = new VideoSequence();\n  videoSequence.width = byteArray.readEncodeInt32();\n  videoSequence.height = byteArray.readEncodeInt32();\n  videoSequence.frameRate = byteArray.readFloat32();\n  if (hasAlpha) {\n    videoSequence.alphaStartX = byteArray.readEncodeInt32();\n    videoSequence.alphaStartY = byteArray.readEncodeInt32();\n  }\n\n  const sps = readByteDataWithStartCode(byteArray);\n  const pps = readByteDataWithStartCode(byteArray);\n  videoSequence.headers.push(sps, pps);\n\n  videoSequence.frameCount = byteArray.readEncodedUint32();\n  for (let i = 0; i < videoSequence.frameCount; i++) {\n    const videoFrame = new VideoFrame();\n    videoFrame.isKeyframe = byteArray.readBitBoolean();\n    videoSequence.frames.push(videoFrame);\n  }\n  for (let i = 0; i < videoSequence.frameCount; i++) {\n    const videoFrame = videoSequence.frames[i];\n    videoFrame.frame = readTime(byteArray);\n    videoFrame.fileBytes = readByteDataWithStartCode(byteArray);\n  }\n\n  if (byteArray.bytesAvailable > 0) {\n    const count = byteArray.readEncodedUint32();\n    for (let i = 0; i < count; i++) {\n      const staticTimeRange: TimeRange = { start: 0, end: 0 };\n      staticTimeRange.start = readTime(byteArray);\n      staticTimeRange.end = readTime(byteArray);\n      videoSequence.staticTimeRanges.push(staticTimeRange);\n    }\n  }\n\n  return videoSequence;\n};\n","import { VideoComposition } from '../../base/video-composition';\nimport { TagCode } from '../types';\nimport { ByteArray } from '../utils/byte-array';\nimport { readCompositionAttributes } from './composition-attributes';\nimport { readTags } from './tag-header';\nimport { readVideoSequence } from './video-sequence-tag';\n\nexport const readVideoComposition = (byteArray: ByteArray): VideoComposition => {\n  const composition = new VideoComposition();\n  composition.id = byteArray.readEncodedUint32();\n  composition.hasAlpha = byteArray.readBoolean();\n  const parameter = { composition, hasAlpha: composition.hasAlpha };\n  readTags(byteArray, parameter, ReadTagsOfVideoComposition);\n  return composition;\n};\n\nexport const ReadTagsOfVideoComposition = (\n  byteArray: ByteArray,\n  code: TagCode,\n  parameter: { composition: VideoComposition; hasAlpha: boolean },\n) => {\n  const { composition } = parameter;\n  switch (code) {\n    case TagCode.CompositionAttributes:\n      readCompositionAttributes(byteArray, composition);\n      break;\n    case TagCode.VideoSequence: {\n      const sequence = readVideoSequence(byteArray, parameter.hasAlpha);\n      sequence.composition = composition;\n      composition.sequences.push(sequence);\n      break;\n    }\n    default:\n      break;\n  }\n};\n","import { Mask } from '../mask';\nimport { Property } from '../property';\nimport { TimeRange } from '../time-range';\n\nexport const enum EffectType {\n  Unknown,\n  Tint,\n  Fill,\n  Stroke,\n  Tritone,\n  DropShadow,\n  RadialWipe,\n  DisplacementMap,\n}\n\nexport class Effect {\n  public effectOpacity: Property<number> = undefined;\n  public maskReferences: Array<Mask>; // mask reference\n\n  public type(): EffectType {\n    return EffectType.Unknown;\n  }\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_time: number): void {}\n\n  public verify(): boolean {\n    return false;\n  }\n}\n","export interface TimeRange {\n  start: number;\n  end: number;\n}\n\nexport function subtractFromTimeRanges(timeRanges: Array<TimeRange>, startTime: number, endTime: number) {\n  if (endTime < startTime) {\n    return;\n  }\n  const size = timeRanges.length;\n  for (let i = size - 1; i >= 0; i--) {\n    const timeRange = timeRanges[i];\n    if (timeRange.end < startTime || timeRange.start > endTime) {\n      continue;\n    }\n    if (timeRange.start < startTime && timeRange.end > endTime) {\n      const range = { start: endTime + 1, end: timeRange.end };\n      timeRange.end = startTime - 1;\n      if (range.end > range.start) {\n        timeRanges.splice(i + 1, 0, range);\n      }\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n      break;\n    }\n    if (timeRange.start >= startTime && timeRange.end <= endTime) {\n      timeRanges.splice(i, 1);\n    } else if (timeRange.start < startTime) {\n      timeRange.end = startTime - 1;\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n    } else {\n      timeRange.start = endTime + 1;\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n    }\n  }\n}\n\nexport function splitTimeRangesAt(timeRanges: Array<TimeRange>, startTime: number) {\n  const size = timeRanges.length;\n  for (let i = size - 1; i >= 0; i--) {\n    const timeRange = timeRanges[i];\n    if (timeRange.start === startTime || timeRange.end <= startTime) {\n      break;\n    }\n    if (timeRange.start < startTime && timeRange.end > startTime) {\n      const range = { start: startTime, end: timeRange.end };\n      timeRange.end = startTime - 1;\n      if (range.end > range.start) {\n        timeRanges.splice(i + 1, 0, range);\n      }\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n      break;\n    }\n  }\n}\n\nfunction findTimeRangeAt(timeRanges: Array<TimeRange>, position: number, start: number, end: number): number {\n  if (start > end) {\n    return -1;\n  }\n  const index = Math.ceil((start + end) * 0.5);\n  const timeRange = timeRanges[index];\n  if (timeRange.start > position) {\n    return findTimeRangeAt(timeRanges, position, start, index - 1);\n  }\n  if (timeRange.end < position) {\n    return findTimeRangeAt(timeRanges, position, index + 1, end);\n  }\n  return index;\n}\n\nexport function convertFrameByStaticTimeRanges(timeRanges: Array<TimeRange>, frame: number): number {\n  const index = findTimeRangeAt(timeRanges, frame, 0, timeRanges.length - 1);\n  return index !== -1 ? timeRanges[index].start : frame;\n}\n","import { CompositionType } from '../codec/types';\nimport { Composition } from './composition';\nimport { Layer } from './layer';\nimport { splitTimeRangesAt, TimeRange } from './time-range';\nimport { verifyFailed } from './utils/verify';\n\nexport class VectorComposition extends Composition {\n  public layers: Array<Layer> = [];\n\n  private staticTimeRanges: Array<TimeRange> = [];\n  private staticTimeRangeUpdated = false;\n\n  public type(): CompositionType {\n    return CompositionType.Vector;\n  }\n\n  /**\n   * Returns the static time ranges of this composition.\n   */\n  public getStaticTimeRanges(): Array<TimeRange> {\n    if (!this.staticTimeRangeUpdated) {\n      this.staticTimeRangeUpdated = true;\n      this.updateStaticTimeRanges();\n    }\n    return this.staticTimeRanges;\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      verifyFailed();\n      return false;\n    }\n    for (const layer of this.layers) {\n      if (!layer || !layer.verify()) {\n        verifyFailed();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateStaticTimeRanges() {\n    if (this.duration > 1) {\n      const range = { start: 0, end: this.duration - 1 };\n      this.staticTimeRanges = [range];\n      for (const layer of this.layers) {\n        if (this.staticTimeRanges.length <= 0) {\n          break;\n        }\n        layer.excludeVaryingRanges(this.staticTimeRanges);\n        splitTimeRangesAt(this.staticTimeRanges, layer.startTime);\n        splitTimeRangesAt(this.staticTimeRanges, layer.startTime + layer.duration);\n      }\n    }\n  }\n}\n","import { TimeRange } from './time-range';\n\nexport class Property<T> {\n  public value: T;\n\n  public animatable(): boolean {\n    return false;\n  }\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_time: number): void {}\n}\n","import { Point, ZERO_POINT } from './point';\nimport { Property } from './property';\nimport { TimeRange } from './time-range';\n\nexport class Transform2D {\n  public static createDefaultTransform2D() {\n    const transform = new Transform2D();\n    transform.anchorPoint = new Property<Point>();\n    transform.anchorPoint.value = ZERO_POINT;\n    transform.position = new Property<Point>();\n    transform.position.value = ZERO_POINT;\n    transform.xPosition = new Property<number>();\n    transform.xPosition.value = 0;\n    transform.yPosition = new Property<number>();\n    transform.yPosition.value = 0;\n    transform.scale = new Property<Point>();\n    transform.scale.value = new Point(1, 1);\n    transform.rotation = new Property<number>();\n    transform.rotation.value = 0;\n    transform.opacity = new Property<number>();\n    transform.opacity.value = 255;\n    return transform;\n  }\n\n  public anchorPoint: Property<Point> = undefined; // spatial\n  public position: Property<Point> = undefined; // spatial\n  public xPosition: Property<number> = undefined;\n  public yPosition: Property<number> = undefined;\n  public scale: Property<Point> = undefined; // multidimensional\n  public rotation: Property<number> = undefined;\n  public opacity: Property<number> = undefined;\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    this.anchorPoint.excludeVaryingRanges(timeRanges);\n    if (this.position !== undefined) {\n      this.position.excludeVaryingRanges(timeRanges);\n    } else {\n      this.xPosition.excludeVaryingRanges(timeRanges);\n      this.yPosition.excludeVaryingRanges(timeRanges);\n    }\n    this.scale.excludeVaryingRanges(timeRanges);\n    this.rotation.excludeVaryingRanges(timeRanges);\n    this.opacity.excludeVaryingRanges(timeRanges);\n  }\n\n  public gotoFrame(frame: number): void {\n    this.anchorPoint.gotoFrame(frame);\n    if (this.position !== undefined) {\n      this.position.gotoFrame(frame);\n    } else {\n      this.xPosition.gotoFrame(frame);\n      this.yPosition.gotoFrame(frame);\n    }\n    this.scale.gotoFrame(frame);\n    this.rotation.gotoFrame(frame);\n    this.opacity.gotoFrame(frame);\n  }\n\n  public verify(): boolean {\n    return (\n      this.anchorPoint !== undefined &&\n      (this.position !== undefined || (this.xPosition !== undefined && this.yPosition !== undefined)) &&\n      this.scale !== undefined &&\n      this.rotation !== undefined &&\n      this.opacity !== undefined\n    );\n  }\n}\n","import { OPAQUE, ZERO_TIME } from '../constant';\nimport { Composition } from './composition';\nimport { Layer, LayerType } from './layer';\nimport { Point, ZERO_POINT } from './point';\nimport { Property } from './property';\nimport { TimeRange } from './time-range';\nimport { Transform2D } from './transform-2d';\nimport { Opacity } from './types';\n\nexport class PreComposeLayer extends Layer {\n  public static wrap(composition: Composition) {\n    const layer = new PreComposeLayer();\n    layer.duration = composition.duration;\n    const transform = new Transform2D();\n    transform.anchorPoint = new Property<Point>();\n    transform.anchorPoint.value = ZERO_POINT;\n    transform.position = new Property<Point>();\n    transform.position.value = ZERO_POINT;\n    transform.scale = new Property<Point>();\n    transform.scale.value = new Point(1, 1);\n    transform.rotation = new Property<number>();\n    transform.rotation.value = 0;\n    transform.opacity = new Property<Opacity>();\n    transform.opacity.value = OPAQUE;\n    layer.transform = transform;\n    layer.composition = composition;\n    return layer;\n  }\n\n  /**\n   * composition reference\n   */\n  public composition: Composition = undefined;\n\n  /**\n   * Indicates when the first frame of the composition shows in the layer's timeline. It could be a negative value.\n   */\n  public compositionStartTime: number = ZERO_TIME;\n\n  private staticTimeRanges: Array<TimeRange> = undefined;\n  private staticTimeRangeUpdated = false;\n\n  public type(): LayerType {\n    return LayerType.PreCompose;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    super.excludeVaryingRanges(timeRanges);\n    if (!timeRanges || timeRanges.length === 0) {\n      return;\n    }\n    this.updateStaticTimeRanges();\n  }\n\n  public gotoFrame(frame: number): void {\n    super.gotoFrame(frame);\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      return false;\n    }\n    if (this.composition) {\n      return true;\n    }\n    return false;\n  }\n\n  private updateStaticTimeRanges(): void {\n    if (this.staticTimeRangeUpdated) {\n      return;\n    }\n    this.staticTimeRangeUpdated = true;\n    const ranges: Array<TimeRange> = this.composition.getStaticTimeRanges();\n    for (let i = ranges.length - 1; i >= 0; i--) {\n      const range: TimeRange = ranges[i];\n      range.start += this.compositionStartTime;\n      range.end += this.compositionStartTime;\n      if (range.end <= this.startTime) {\n        ranges.pop();\n      } else if (range.start < this.startTime) {\n        range.start = 0;\n      } else if (range.start >= this.startTime + this.duration - 1) {\n        ranges.pop();\n      } else if (range.end > this.startTime + this.duration - 1) {\n        range.end = this.startTime + this.duration - 1;\n      }\n    }\n    this.staticTimeRanges = ranges;\n  }\n}\n","import { Layer, LayerType } from './layer';\nimport { ShapeElement } from './shape-element';\nimport { TimeRange } from './time-range';\n\nexport class ShapeLayer extends Layer {\n  private contents: Array<ShapeElement> = [];\n\n  public type(): LayerType {\n    return LayerType.Shape;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>) {\n    super.excludeVaryingRanges(timeRanges);\n    for (const element of this.contents) {\n      element.excludeVaryingRanges(timeRanges);\n    }\n  }\n\n  public gotoFrame(frame: number) {\n    super.gotoFrame(frame);\n    for (const element of this.contents) {\n      element.gotoFrame(frame);\n    }\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      return false;\n    }\n\n    for (const element of this.contents) {\n      if (element === undefined || !element.verify()) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Black, Color } from './color';\nimport { Layer, LayerType } from './layer';\nimport { TimeRange } from './time-range';\nimport { verifyAndrReturn, verifyFailed } from './utils/verify';\n\nexport class SolidLayer extends Layer {\n  public solidColor: Color = Black;\n  public width = 0;\n  public height = 0;\n\n  public type(): LayerType {\n    return LayerType.Solid;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>) {\n    super.excludeVaryingRanges(timeRanges);\n  }\n\n  public gotoFrame(frame: number) {\n    super.gotoFrame(frame);\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      verifyFailed();\n      return false;\n    }\n    return verifyAndrReturn(this.width > 0 && this.height > 0);\n  }\n}\n","import { Layer, LayerType } from './layer';\n\nexport class UnDefinedLayer extends Layer {\n  public type(): LayerType {\n    return LayerType.undefined;\n  }\n}\n","import { KeyframeInterpolationType } from '../constant';\nimport { Point, ZERO_POINT } from './point';\n\nexport class Keyframe<T> {\n  public startValue: T;\n  public endValue: T;\n  public startTime = 0;\n  public endTime = 0;\n  public interpolationType: KeyframeInterpolationType = KeyframeInterpolationType.Hold; // 插补类型\n  public bezierOut: Array<Point> = [];\n  public bezierIn: Array<Point> = [];\n  public spatialOut: Point = ZERO_POINT;\n  public spatialIn: Point = ZERO_POINT;\n\n  public initialize(): void {}\n\n  public getValue(_time: number): any {\n    return this.startValue;\n  }\n\n  public containsTime(time: number): boolean {\n    return time >= this.startTime && time < this.endTime;\n  }\n}\n","import { KeyframeInterpolationType } from '../constant';\nimport { Keyframe } from './keyframe';\nimport { Property } from './property';\nimport { splitTimeRangesAt, subtractFromTimeRanges, TimeRange } from './time-range';\n\nexport class AnimatableProperty<T> extends Property<T> {\n  private lastKeyframeIndex = 0;\n\n  public constructor(public keyframes: Array<Keyframe<T>>) {\n    super();\n    if (keyframes !== undefined && keyframes.length > 0) {\n      this.value = keyframes[0].startValue;\n    }\n    for (const keyframe of keyframes) {\n      keyframe.initialize();\n    }\n  }\n\n  public animatable(): boolean {\n    return true;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    for (const keyframe of this.keyframes) {\n      switch (keyframe.interpolationType) {\n        case KeyframeInterpolationType.Bezier:\n        case KeyframeInterpolationType.Linear:\n          subtractFromTimeRanges(timeRanges, keyframe.startTime, keyframe.endTime - 1);\n          break;\n        default:\n          splitTimeRangesAt(timeRanges, keyframe.startTime);\n          splitTimeRangesAt(timeRanges, keyframe.endTime);\n          break;\n      }\n    }\n  }\n\n  public gotoFrame(frame: number): void {\n    let lastKeyframe = this.keyframes[this.lastKeyframeIndex];\n    if (lastKeyframe.containsTime(frame)) {\n      this.value = lastKeyframe.getValue(frame);\n      return;\n    }\n    if (frame < lastKeyframe.startTime) {\n      while (this.lastKeyframeIndex > 0) {\n        this.lastKeyframeIndex -= 1;\n        if (this.keyframes[this.lastKeyframeIndex].containsTime(frame)) {\n          break;\n        }\n      }\n    } else {\n      while (this.lastKeyframeIndex < this.keyframes.length - 1) {\n        this.lastKeyframeIndex += 1;\n        if (this.keyframes[this.lastKeyframeIndex].containsTime(frame)) {\n          break;\n        }\n      }\n    }\n    lastKeyframe = this.keyframes[this.lastKeyframeIndex];\n    if (frame <= lastKeyframe.startTime) {\n      this.value = lastKeyframe.startValue;\n    } else if (frame >= lastKeyframe.endTime) {\n      this.value = lastKeyframe.endValue;\n    } else {\n      this.value = lastKeyframe.getValue(frame);\n    }\n  }\n}\n","import { TagCode } from './types';\nimport { ByteArray } from './utils/byte-array';\nimport { Keyframe } from '../base/keyframe';\nimport { Property } from '../base/property';\nimport { BEZIER_PRECISION, readTime } from './data-types';\nimport { KeyframeInterpolationType } from '../constant';\nimport { AnimatableProperty } from '../base/animatable-property';\n\nexport const enum AttributeType {\n  Value,\n  FixedValue, // always exists, no need to store a flag.\n  SimpleProperty,\n  DiscreteProperty,\n  MultiDimensionProperty,\n  SpatialProperty,\n  BitFlag, // save bool value as a flag\n  Custom, // save a flag to indicate whether it should trigger a custom reading / writing action.\n}\n\nexport interface AttributeFlag {\n  /**\n   * Indicates whether or not this value is exist.\n   */\n  exist: boolean;\n  /**\n   * Indicates whether or not the size of this property's keyframes is greater than zero.\n   */\n  animatable: boolean;\n  /**\n   * Indicates whether or not this property has spatial values.\n   */\n  hasSpatial: boolean;\n}\n\nexport const readTagBlock = <T>(byteArray: ByteArray, parameter: T, blockConfig: BlockConfig) => {\n  const tagConfig: BlockConfig = blockConfig;\n  const flags: Array<AttributeFlag> = [];\n  if (!tagConfig.configs || tagConfig.configs.length === 0) {\n    return parameter;\n  }\n  for (const config of tagConfig.configs) {\n    const flag = readAttributeFlag(byteArray, config);\n    flags.push(flag);\n  }\n  byteArray.alignWithBytes();\n  let index = 0;\n  for (const config of tagConfig.configs) {\n    const flag = flags[index];\n    const target = config.key;\n    config.readAttribute(byteArray, flag, parameter as any as Object, target);\n    index += 1;\n  }\n  return parameter;\n};\n\nexport class BlockConfig {\n  public tagCode: TagCode = TagCode.End;\n  public configs: Array<BaseAttribute> = [];\n\n  public constructor(tagCode: TagCode) {\n    this.tagCode = tagCode;\n  }\n}\n\nexport class BaseAttribute {\n  public attributeType: AttributeType;\n  public defaultValue: any;\n  public key: string;\n\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    this.attributeType = attributeType;\n    this.defaultValue = defaultValue;\n    this.key = key;\n  }\n\n  public readAttribute(_byteArray: ByteArray, _flag: AttributeFlag, _targetClass: object, _target: string) {}\n\n  public readValue(_byteArray: ByteArray): any {\n    return undefined;\n  }\n\n  public readValueList(_byteArray: ByteArray, _list: Array<any>, _count: number) {}\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<any> {\n    return new Keyframe<any>();\n  }\n}\n\nexport const readAttribute = (\n  byteArray: ByteArray,\n  flag: AttributeFlag,\n  targetClass: object,\n  target: string,\n  config: BaseAttribute,\n) => {\n  if (config.attributeType === AttributeType.BitFlag) {\n    targetClass[target] = flag.exist;\n  } else if (config.attributeType === AttributeType.FixedValue) {\n    targetClass[target] = config.readValue(byteArray);\n  } else if (config.attributeType === AttributeType.Value) {\n    targetClass[target] = readValue(byteArray, config, flag);\n  } else {\n    targetClass[target] = readProperty(byteArray, config, flag);\n  }\n};\n\nexport const readProperty = <T>(byteArray: ByteArray, config: BaseAttribute, flag: AttributeFlag): any => {\n  let property: Property<T>;\n  if (flag.exist) {\n    if (flag.animatable) {\n      const keyframes: Array<Keyframe<T>> = readKeyframes(byteArray, config, flag);\n      if (!keyframes || keyframes.length === 0) {\n        throw 'Wrong number of keyframes.';\n        return property;\n      }\n      readTimeAndValue(byteArray, keyframes, config);\n      readTimeEase(byteArray, keyframes, config);\n      if (flag.hasSpatial) {\n        readSpatialEase(byteArray, keyframes);\n      }\n      property = new AnimatableProperty<T>(keyframes);\n    } else {\n      property = new Property<T>();\n      property.value = readValue(byteArray, config, flag);\n    }\n  } else {\n    property = new Property<T>();\n    property.value = config.defaultValue;\n  }\n  return property;\n};\n\nexport const readValue = (byteArray: ByteArray, config: BaseAttribute, flag: AttributeFlag): any => {\n  if (flag.exist) {\n    return config.readValue(byteArray);\n  }\n  return config.defaultValue;\n};\n\nexport const readAttributeFlag = (byteArray: ByteArray, config: BaseAttribute): AttributeFlag => {\n  const flag: AttributeFlag = { exist: false, animatable: false, hasSpatial: false };\n  const { attributeType } = config;\n  if (attributeType === AttributeType.FixedValue) {\n    flag.exist = true;\n    return flag;\n  }\n  flag.exist = byteArray.readBitBoolean();\n  if (\n    !flag.exist ||\n    attributeType === AttributeType.Value ||\n    attributeType === AttributeType.BitFlag ||\n    attributeType === AttributeType.Custom\n  ) {\n    return flag;\n  }\n  flag.animatable = byteArray.readBitBoolean();\n  if (!flag.animatable || attributeType !== AttributeType.SpatialProperty) {\n    return flag;\n  }\n  flag.hasSpatial = byteArray.readBitBoolean();\n  return flag;\n};\n\nexport const readKeyframes = <T>(\n  byteArray: ByteArray,\n  config: BaseAttribute,\n  flag: AttributeFlag,\n): Array<Keyframe<T>> => {\n  const keyframes: Array<any> = [];\n  const numFrames: number = byteArray.readEncodedUint32();\n  for (let i = 0; i < numFrames; i++) {\n    let keyframe: Keyframe<T>;\n    if (config.attributeType === AttributeType.DiscreteProperty) {\n      keyframe = new Keyframe<T>();\n    } else {\n      const interpolationType = byteArray.readUBits(2) as KeyframeInterpolationType;\n      if (interpolationType === KeyframeInterpolationType.Hold) {\n        keyframe = new Keyframe<T>();\n      } else {\n        keyframe = config.newKeyframe(flag);\n        keyframe.interpolationType = interpolationType;\n      }\n    }\n    keyframes.push(keyframe);\n  }\n\n  return keyframes;\n};\n\nconst readTimeAndValue = <T>(byteArray: ByteArray, keyframes: Array<Keyframe<T>>, config: BaseAttribute) => {\n  const numFrames: number = keyframes.length;\n  keyframes[0].startTime = readTime(byteArray);\n  for (let i = 0; i < numFrames; i++) {\n    const time: number = readTime(byteArray);\n    keyframes[i].endTime = time;\n    if (i < numFrames - 1) {\n      keyframes[i + 1].startTime = time;\n    }\n  }\n  const list: Array<T> = [];\n  config.readValueList(byteArray, list, numFrames + 1);\n  let index = 0;\n  keyframes[0].startValue = list[index];\n  index += 1;\n  for (let i = 0; i < numFrames; i++) {\n    const value = list[index];\n    index += 1;\n    keyframes[i].endValue = value;\n    if (i < numFrames - 1) {\n      keyframes[i + 1].startValue = value;\n    }\n  }\n};\n\nconst readTimeEase = <T>(byteArray: ByteArray, keyframes: Array<Keyframe<T>>, config: BaseAttribute) => {\n  const dimensionality: number =\n    config.attributeType === AttributeType.MultiDimensionProperty ? config.dimensionality() : 1;\n  const numBits: number = byteArray.readNumBits();\n  for (const keyframe of keyframes) {\n    if (keyframe.interpolationType !== KeyframeInterpolationType.Bezier) {\n      continue;\n    }\n    let x: number;\n    let y: number;\n    for (let i = 0; i < dimensionality; i++) {\n      x = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      y = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      keyframe.bezierOut.push({ x, y });\n      x = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      y = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      keyframe.bezierIn.push({ x, y });\n    }\n  }\n};\n\nconst readSpatialEase = <T>(_byteArray: ByteArray, _keyframes: Array<Keyframe<T>>) => {};\n","import { SolidLayer } from '../../base/solid-layer';\nimport { readColor } from '../data-types';\nimport { ByteArray } from '../utils/byte-array';\n\nexport function readSolidColor(byteArray: ByteArray, layer: SolidLayer) {\n  layer.solidColor = readColor(byteArray);\n  layer.width = byteArray.readEncodeInt32();\n  layer.height = byteArray.readEncodeInt32();\n}\n","export function interpolateFloat(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n","export class Interpolator {\n  public getInterpolation(input: number): number {\n    return input;\n  }\n}\n","import { KeyframeInterpolationType } from '../../constant';\nimport { Keyframe } from '../keyframe';\nimport { Point } from '../point';\nimport { interpolateFloat } from '../utils/interpolate';\nimport { Interpolator } from '../utils/interpolator';\n\nexport class MultiDimensionPointKeyframe extends Keyframe<Point> {\n  private xInterpolator: Interpolator = undefined;\n  private yInterpolator: Interpolator = undefined;\n\n  public initialize(): void {\n    super.initialize();\n    if (this.interpolationType === KeyframeInterpolationType.Bezier) {\n      // todo sun bezier\n      // this.xInterpolator = new BezierEasing(this.bezierOut[0], this.bezierIn[0]);\n      // this.yInterpolator = new BezierEasing(this.bezierOut[1], this.bezierIn[1]);\n    } else {\n      this.xInterpolator = new Interpolator();\n      this.yInterpolator = new Interpolator();\n    }\n  }\n\n  public getValue(time: number): Point {\n    const progress = (time - this.startTime) / (this.endTime - this.startTime);\n    const xProgress = this.xInterpolator.getInterpolation(progress);\n    const yProgress = this.yInterpolator.getInterpolation(progress);\n    const x = interpolateFloat(this.startValue.x, this.endValue.x, xProgress);\n    const y = interpolateFloat(this.startValue.y, this.endValue.y, yProgress);\n    return { x, y };\n  }\n}\n","import { KeyframeInterpolationType } from '../../constant';\nimport { Keyframe } from '../keyframe';\nimport { interpolateFloat } from '../utils/interpolate';\nimport { Interpolator } from '../utils/interpolator';\n\nexport class SingleEaseKeyframe<T> extends Keyframe<T> {\n  private interpolator: Interpolator = undefined;\n\n  public initialize() {\n    if (this.interpolationType === KeyframeInterpolationType.Bezier) {\n      // Bazier相关\n    } else {\n      this.interpolator = new Interpolator();\n    }\n  }\n\n  public getProgress(time: number): number {\n    const progress = (time - this.startTime) / (this.endTime - this.startTime);\n    return this.interpolator.getInterpolation(progress);\n  }\n\n  public getValue(time: number): number {\n    const progress = this.getProgress(time);\n    return interpolateFloat(this.startValue as any as number, this.endValue as any as number, progress);\n  }\n}\n","import { Color } from '../base/color';\nimport { Composition } from '../base/composition';\nimport { Keyframe } from '../base/keyframe';\nimport { MultiDimensionPointKeyframe } from '../base/keyframes/multi-dimension-point-keyframe';\nimport { SingleEaseKeyframe } from '../base/keyframes/single-ease-keyframe';\nimport { Layer } from '../base/layer';\nimport { Point } from '../base/point';\nimport { Ratio } from '../base/ratio';\nimport { AttributeFlag, AttributeType, BaseAttribute, readAttribute } from './attribute-helper';\nimport {\n  readColor,\n  readCompositionID,\n  readLayerID,\n  readPoint,\n  readRatio,\n  readTime,\n  SPATIAL_PRECISION,\n} from './data-types';\nimport { ByteArray } from './utils/byte-array';\n\nexport interface BaseAttributeConfig<T> {\n  newKeyframe(flag: AttributeFlag): Keyframe<T>;\n}\n\nexport class FloatAttributeConfig extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return byteArray.readFloat32();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list.push(this.readValue(byteArray));\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class BOOLAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Boolean> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): boolean {\n    return byteArray.readBoolean();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<boolean>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list.push(byteArray.readBitBoolean());\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<boolean> {\n    return new Keyframe<boolean>();\n  }\n}\n\nexport class Uint8AttributeConfig extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: number) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return byteArray.readUint8();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    const valueList = byteArray.readUint32List(count);\n    for (let i = 0; i < count; i++) {\n      list.push(valueList[i]);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class AttributeConfigUint32 extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return byteArray.readEncodedUint32();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    list = byteArray.readUint32List(count);\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class TimeAttributeConfig extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return readTime(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class PointAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Point> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Point {\n    return readPoint(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Point>, count: number) {\n    if (this.attributeType === AttributeType.SpatialProperty) {\n      const values: number[] = byteArray.readFloatList(count * 2, SPATIAL_PRECISION);\n      for (let i = 0; i < count; i++) {\n        list[i] || (list[i] = new Point(0, 0));\n        list[i].x = values[i];\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        list[i] = readPoint(byteArray);\n      }\n    }\n  }\n\n  public dimensionality(): number {\n    return 2;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Point> {\n    switch (this.attributeType) {\n      case AttributeType.MultiDimensionProperty:\n        return new MultiDimensionPointKeyframe();\n      // case AttributeType.SimpleProperty:\n      //     return new SpatialPointKeyframe();\n\n      default:\n        return new SingleEaseKeyframe<Point>();\n    }\n  }\n}\n\nexport class ColorAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Color> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Color {\n    return readColor(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Color>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 3;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Color> {\n    return new SingleEaseKeyframe<Color>();\n  }\n}\n\nexport class RatioAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Ratio> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Ratio {\n    return readRatio(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Ratio>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Ratio> {\n    return new SingleEaseKeyframe<Ratio>();\n  }\n}\n\nexport class StringAttributeConfig extends BaseAttribute implements BaseAttributeConfig<string> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): string {\n    return byteArray.readUTF8String();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<string>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<string> {\n    return new SingleEaseKeyframe<string>();\n  }\n}\n\nexport class LayerAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Layer> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Layer {\n    return readLayerID(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Layer>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Layer> {\n    return new SingleEaseKeyframe<Layer>();\n  }\n}\n\nexport class CompositionAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Composition> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Composition {\n    return readCompositionID(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Composition>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Composition> {\n    return new SingleEaseKeyframe<Composition>();\n  }\n}\n","import { TrackMatteType } from '../../base/layer';\nimport { Point, ZERO_POINT } from '../../base/point';\nimport { DefaultRatio } from '../../base/ratio';\nimport { BlendMode, OPAQUE, ZERO_TIME } from '../../constant';\nimport { TagCode } from '../types';\nimport { AttributeType, BlockConfig } from '../attribute-helper';\nimport {\n  BOOLAttributeConfig,\n  FloatAttributeConfig,\n  LayerAttributeConfig,\n  PointAttributeConfig,\n  RatioAttributeConfig,\n  StringAttributeConfig,\n  TimeAttributeConfig,\n  Uint8AttributeConfig,\n} from '../attributes';\n\nexport const readBlockConfigOfLayerAttributes: BlockConfig = {\n  tagCode: TagCode.LayerAttributes,\n  configs: [\n    new BOOLAttributeConfig('isActive', AttributeType.BitFlag, true),\n    new BOOLAttributeConfig('autoOrientation', AttributeType.BitFlag, false),\n    new LayerAttributeConfig('parent', AttributeType.Value, undefined),\n    new RatioAttributeConfig('stretch', AttributeType.Value, DefaultRatio),\n    new TimeAttributeConfig('startTime', AttributeType.Value, ZERO_TIME),\n    new Uint8AttributeConfig('blendMode', AttributeType.Value, BlendMode.Normal),\n    new Uint8AttributeConfig('trackMatteType', AttributeType.Value, TrackMatteType.None),\n    new FloatAttributeConfig('timeRemap', AttributeType.SimpleProperty, 0),\n    new TimeAttributeConfig('duration', AttributeType.FixedValue, ZERO_TIME),\n  ],\n};\n\nexport const readBlockConfigOfLayerAttributesV2: BlockConfig = {\n  tagCode: TagCode.LayerAttributesV2,\n  configs: [\n    new BOOLAttributeConfig('isActive', AttributeType.BitFlag, true),\n    new BOOLAttributeConfig('autoOrientation', AttributeType.BitFlag, false),\n    new LayerAttributeConfig('parent', AttributeType.Value, undefined),\n    new RatioAttributeConfig('stretch', AttributeType.Value, DefaultRatio),\n    new TimeAttributeConfig('startTime', AttributeType.Value, ZERO_TIME),\n    new Uint8AttributeConfig('blendMode', AttributeType.Value, BlendMode.Normal),\n    new Uint8AttributeConfig('trackMatteType', AttributeType.Value, TrackMatteType.None),\n    new FloatAttributeConfig('timeRemap', AttributeType.SimpleProperty, 0),\n    new TimeAttributeConfig('duration', AttributeType.FixedValue, ZERO_TIME),\n    new StringAttributeConfig('name', AttributeType.Value, ''),\n  ],\n};\n\nexport const readBlockConfigOfTransform2D: BlockConfig = {\n  tagCode: TagCode.Transform2D,\n  configs: [\n    new PointAttributeConfig('anchorPoint', AttributeType.SpatialProperty, ZERO_POINT),\n    new PointAttributeConfig('position', AttributeType.SpatialProperty, ZERO_POINT),\n    new FloatAttributeConfig('xPosition', AttributeType.SimpleProperty, 0),\n    new FloatAttributeConfig('yPosition', AttributeType.SimpleProperty, 0),\n    new PointAttributeConfig('scale', AttributeType.MultiDimensionProperty, new Point(1, 1)),\n    new FloatAttributeConfig('rotation', AttributeType.SimpleProperty, 0),\n    new Uint8AttributeConfig('opacity', AttributeType.SimpleProperty, OPAQUE),\n  ],\n};\n\nexport const readBlockConfigOfMask: BlockConfig = {\n  tagCode: TagCode.MaskBlock,\n  configs: [],\n};\n","import { ByteArray } from '../utils/byte-array';\nimport { PreComposeLayer } from '../../base/pre-compose-layer';\nimport { Composition } from '../../base/composition';\nimport { readTime } from '../data-types';\n\nexport function readCompositionReference(byteArray: ByteArray, layer: PreComposeLayer) {\n  const id = byteArray.readEncodedUint32();\n  if (id > 0) {\n    layer.composition = new Composition();\n    layer.composition.id = id;\n  }\n  layer.compositionStartTime = readTime(byteArray);\n}\n","import { Layer, LayerType } from '../../base/layer';\nimport { ZERO_POINT } from '../../base/point';\nimport { PreComposeLayer } from '../../base/pre-compose-layer';\nimport { ShapeLayer } from '../../base/shape-layer';\nimport { SolidLayer } from '../../base/solid-layer';\nimport { Transform2D } from '../../base/transform-2d';\nimport { UnDefinedLayer } from '../../base/un-defined-layer';\nimport { TagCode } from '../types';\nimport { readTagBlock } from '../attribute-helper';\nimport { ByteArray } from '../utils/byte-array';\nimport { readSolidColor } from './solid-layer';\nimport {\n  readBlockConfigOfLayerAttributes,\n  readBlockConfigOfLayerAttributesV2,\n  readBlockConfigOfTransform2D,\n} from './tag-attributes';\nimport { readTags } from './tag-header';\nimport { readCompositionReference } from './read-composition-reference';\n\nexport const readLayer = (byteArray: ByteArray): Layer => {\n  const layerType: LayerType = byteArray.readUint8();\n  let layer: Layer;\n  switch (layerType) {\n    case LayerType.undefined:\n      layer = new UnDefinedLayer();\n      break;\n    case LayerType.Solid:\n      layer = new SolidLayer();\n      break;\n    case LayerType.Shape:\n      layer = new ShapeLayer();\n      break;\n    case LayerType.PreCompose:\n      layer = new PreComposeLayer();\n      break;\n    default:\n      layer = new Layer();\n      break;\n  }\n  layer.id = byteArray.readEncodedUint32();\n  readTags(byteArray, layer, readTagsOfLayer);\n  return layer;\n};\n\nexport const readTagsOfLayer = (byteArray: ByteArray, code: TagCode, layer: Layer) => {\n  switch (code) {\n    case TagCode.LayerAttributes:\n      readTagBlock(byteArray, layer, readBlockConfigOfLayerAttributes);\n      if (layer.duration <= 0) layer.duration = 1;\n      break;\n    case TagCode.LayerAttributesV2:\n      readTagBlock(byteArray, layer, readBlockConfigOfLayerAttributesV2);\n      if (layer.duration <= 0) layer.duration = 1;\n      break;\n    case TagCode.Transform2D:\n      layer.transform = new Transform2D();\n      readTagBlock(byteArray, layer.transform, readBlockConfigOfTransform2D);\n      // hasPosition || (!hasXPosition && !hasXPosition)\n      if (\n        layer.transform.position.animatable() ||\n        layer.transform.position.value !== ZERO_POINT ||\n        (!(layer.transform.xPosition.animatable() || layer.transform.xPosition.value !== 0) &&\n          !(layer.transform.yPosition.animatable() || layer.transform.yPosition.value !== 0))\n      ) {\n        layer.transform.xPosition = undefined;\n        layer.transform.yPosition = undefined;\n      } else {\n        layer.transform.position = undefined;\n      }\n      break;\n    case TagCode.SolidColor:\n      if (layer.type() === LayerType.Solid) {\n        readSolidColor(byteArray, layer as SolidLayer);\n      }\n      break;\n    case TagCode.CompositionReference:\n      if (layer.type() === LayerType.PreCompose) {\n        readCompositionReference(byteArray, layer as PreComposeLayer);\n      }\n      break;\n    default:\n      break;\n  }\n};\n","import { EffectType } from '../../base/effects/effect';\nimport { FillEffect } from '../../base/effects/fill-effect';\nimport { StrokeEffect } from '../../base/effects/stroke-effect';\nimport { Layer, LayerType, TrackMatteType } from '../../base/layer';\nimport { Mask } from '../../base/mask';\nimport { TextLayer } from '../../base/text-layer';\nimport { VectorComposition } from '../../base/vector-composition';\nimport { TagCode } from '../types';\nimport { ByteArray } from '../utils/byte-array';\nimport { readCompositionAttributes } from './composition-attributes';\nimport { readLayer } from './layer-tag';\nimport { readTags } from './tag-header';\n\nexport const readVectorComposition = (byteArray: ByteArray): VectorComposition => {\n  const composition = new VectorComposition();\n  composition.id = byteArray.readEncodedUint32();\n  readTags(byteArray, composition, readTagsOfVectorComposition);\n  installArrayLayerReference(composition.layers);\n  return composition;\n};\n\nexport const readTagsOfVectorComposition = (byteArray: ByteArray, code: TagCode, composition: VectorComposition) => {\n  switch (code) {\n    case TagCode.CompositionAttributes:\n      readCompositionAttributes(byteArray, composition);\n      break;\n    case TagCode.LayerBlock:\n      composition.layers.push(readLayer(byteArray));\n      break;\n    default:\n      break;\n  }\n};\n\nexport const installArrayLayerReference = (layers: Array<Layer>) => {\n  if (!layers || layers.length === 0) {\n    return;\n  }\n  const layerMap = new Map();\n  for (const layer of layers) {\n    if (!layer) {\n      continue;\n    }\n    installLayerReference(layer);\n    layerMap.set(layer.id, layer);\n  }\n\n  let index = 0;\n  for (const layer of layers) {\n    if (!layer) {\n      continue;\n    }\n    if (layer.parent !== undefined) {\n      const ID = layer.parent.id;\n      const result = layerMap.get(ID);\n      if (result !== undefined) {\n        layer.parent = result;\n      }\n    }\n    if (index > 0 && hasTrackMatte(layer.trackMatteType)) {\n      layer.trackMatteLayer = layers[index - 1];\n    }\n    if (layer.effects !== undefined && layer.effects.length > 0) {\n      for (const effect of layer.effects) {\n        if (!effect) {\n          continue;\n        }\n        if (effect.type() === EffectType.DisplacementMap) {\n          // let displacementMapEffect = <DisplacementMapEffect> effect;\n          // if (displacementMapEffect.displacementMapLayer != undefined) {\n          //     let ID = displacementMapEffect.displacementMapLayer.id;\n          //     let result = layerMap.get(ID);\n          //     if (result != undefined) {\n          //         displacementMapEffect.displacementMapLayer = result;\n          //     }\n          // }\n        }\n      }\n    }\n    index += 1;\n  }\n};\n\n/**\n * 将Layer里面的MaskID标识换成真正的Mask\n * @param layer\n */\nexport const installLayerReference = (layer: Layer) => {\n  if (!layer || !layer.masks || layer.masks.length === 0) {\n    return;\n  }\n  const maskMap = new Map();\n  for (const mask of layer.masks) {\n    if (!mask) {\n      continue;\n    }\n    maskMap.set(mask.id, mask);\n  }\n  if (layer.effects !== undefined && layer.effects.length > 0) {\n    for (const effect of layer.effects) {\n      if (!effect) {\n        continue;\n      }\n      if (effect.maskReferences !== undefined && effect.maskReferences.length > 0) {\n        const maskReferences = new Array<Mask>();\n        for (const mask of effect.maskReferences) {\n          const ID = mask.id;\n          const result = maskMap.get(ID);\n          if (result !== undefined) {\n            maskReferences.push(result);\n          }\n        }\n        effect.maskReferences = maskReferences;\n      }\n      switch (effect.type()) {\n        case EffectType.Fill:\n          if ((effect as FillEffect).fillMask !== undefined) {\n            const ID = (effect as FillEffect).fillMask.id;\n            const result = maskMap.get(ID);\n            if (result !== undefined) {\n              (effect as FillEffect).fillMask = result;\n            }\n          }\n          break;\n        case EffectType.Stroke: {\n          const strokeEffect = effect as StrokeEffect;\n          if ((strokeEffect.path! = undefined)) {\n            const ID = strokeEffect.path.id;\n            const result = maskMap.get(ID);\n            if (result !== undefined) {\n              strokeEffect.path = result;\n            }\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n\n  if (layer.type() === LayerType.Text) {\n    const { pathOption } = layer as TextLayer;\n    if (!!pathOption?.path) {\n      const ID = pathOption.path.id;\n      const result = maskMap.get(ID);\n      if (result !== undefined) {\n        pathOption.path = result;\n      }\n    }\n  }\n};\n\nexport const hasTrackMatte = (type: TrackMatteType): boolean => {\n  switch (type) {\n    case TrackMatteType.Alpha:\n    case TrackMatteType.AlphaInverted:\n      return true;\n    default:\n      return false;\n  }\n};\n","import { ByteArray } from '../utils/byte-array';\nimport { TagCode } from '../types';\nimport { Context } from '../context';\nimport { readVideoComposition } from './video-composition-tag';\nimport { readVectorComposition } from './vector-composition-tag';\n\nexport function readTagsOfFile(byteArray: ByteArray, code: TagCode, context: Context): void {\n  switch (code) {\n    case TagCode.VectorCompositionBlock:\n      context.compositions.push(readVectorComposition(byteArray));\n      break;\n    case TagCode.VideoCompositionBlock:\n      context.compositions.push(readVideoComposition(byteArray));\n      break;\n    default:\n      break;\n  }\n}\n","import { ByteArray } from './codec/utils/byte-array';\nimport { Log } from './base/utils/log';\nimport { readTags } from './codec/tags/tag-header';\nimport { readTagsOfFile } from './codec/tags/file-tags';\nimport { Composition } from './base/composition';\nimport { ImageBytes } from './base/image-bytes';\nimport { CompositionType, TagCode } from './codec/types';\nimport { VectorComposition } from './base/vector-composition';\nimport { LayerType } from './base/layer';\nimport { PreComposeLayer } from './base/pre-compose-layer';\nimport { ErrorCode } from './base/utils/error-map';\n\nexport const verifyAndMake = (compositions: Array<Composition>, images: Array<ImageBytes>) => {\n  let success: boolean = compositions.length > 0;\n  for (const composition of compositions) {\n    if (!composition || !composition.verify()) {\n      success = false;\n      break;\n    }\n  }\n\n  for (const imagBytes of images) {\n    if (!imagBytes || !imagBytes.verify()) {\n      success = false;\n      break;\n    }\n  }\n\n  if (!success) {\n    compositions = undefined;\n    images = undefined;\n    return undefined;\n  }\n  return { compositions, images };\n};\n\n/**\n * 将Layer里面的compositionID标识换成真正的Composition\n */\nexport function installReference(compositions: Array<Composition>) {\n  if (!compositions || compositions.length === 0) {\n    return;\n  }\n  const compositionMap = new Map();\n  for (const composition of compositions) {\n    if (!composition) {\n      continue;\n    }\n    compositionMap.set(composition.id, composition);\n  }\n  for (const item of compositions) {\n    if (!item) {\n      continue;\n    }\n    if (item.type() === CompositionType.Vector) {\n      const vectorItem = item as VectorComposition;\n      if (vectorItem.layers !== undefined && vectorItem.layers.length > 0) {\n        for (const layer of vectorItem.layers) {\n          layer.containingComposition = vectorItem;\n          const preComposeLayer = layer as PreComposeLayer;\n          if (preComposeLayer.type() === LayerType.PreCompose && preComposeLayer.composition !== undefined) {\n            const ID = preComposeLayer.composition.id;\n            const result = compositionMap.get(ID);\n            if (result !== undefined) {\n              preComposeLayer.composition = result;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport class PAGCodec {\n  public static maxSupportedTagLevel(): number {\n    return TagCode.Count - 1;\n  }\n\n  /**\n   * 从特殊的字节流中解码出一个 PAG 文件\n   */\n  public static decode(byteArray: ByteArray) {\n    if (!byteArray) Log.error(ErrorCode.NotByteArray);\n    const bodyByteArray: ByteArray = this.readBodyBytes(byteArray);\n    const { context } = bodyByteArray;\n    readTags(bodyByteArray, context, readTagsOfFile);\n    installReference(context.compositions);\n    const { compositions, images } = verifyAndMake(context.releaseCompositions(), context.releaseImages());\n    return { compositions, images, tagLevel: context.tagLevel };\n  }\n\n  public static readBodyBytes(byteArray: ByteArray): ByteArray {\n    if (byteArray.length < 11) Log.error(ErrorCode.PagFileLengthErrorTooShort);\n\n    const P: number = byteArray.readInt8();\n    const A: number = byteArray.readInt8();\n    const G: number = byteArray.readInt8();\n    if (P !== 80 || A !== 65 || G !== 71) {\n      Log.error(ErrorCode.InvalidPagFileHeader);\n    }\n    byteArray.readInt8(); // version\n    byteArray.readUint32(); // bodyLength\n    byteArray.readInt8(); // compression\n    return byteArray.readBytes();\n  }\n}\n","interface RequestOption {\n  url: string;\n  method?: string;\n  data?: object;\n  responseType?: XMLHttpRequestResponseType;\n  success?: (any) => void;\n  error?: (any) => void;\n}\n\nexport function request(option: RequestOption) {\n  if (String(option) !== '[object Object]') return undefined;\n  const params = Object.assign(option);\n  params.method = option.method ? option.method.toUpperCase() : 'GET';\n  params.data = option.data || {};\n  let data = '';\n  const formData = Object.keys(params.data).map((key) => `${key}=${params.data[key]}`);\n  data = formData.join('&');\n\n  if (params.method === 'GET' && formData.length > 0) {\n    params.url += location.search.length === 0 ? ''.concat('?', data) : ''.concat('&', data);\n  }\n\n  const xhr = new XMLHttpRequest();\n\n  xhr.responseType = params.responseType;\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === 4) {\n      if (xhr.status === 200) {\n        if (params.success && typeof params.success === 'function') {\n          params.success(xhr.response);\n        }\n      } else {\n        if (params.error && typeof params.error === 'function') {\n          params.error(xhr.onerror);\n        }\n      }\n    }\n  };\n  xhr.open(params.method, params.url, true);\n  if (params.method === 'POST') {\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  }\n  xhr.send(params.method === 'POST' ? data : undefined);\n}\n","import { LayerType } from '../base/layer';\nimport { PreComposeLayer } from '../base/pre-compose-layer';\nimport { Transform2D } from '../base/transform-2d';\nimport { ErrorCode } from '../base/utils/error-map';\nimport { Log } from '../base/utils/log';\nimport { VectorComposition } from '../base/vector-composition';\nimport { VideoComposition } from '../base/video-composition';\nimport { VideoSequence } from '../base/video-sequence';\nimport { CompositionType } from '../codec/types';\nimport { concatArrayBuffers2Uint8Array } from '../codec/utils/byte-utils';\nimport { PAGFile } from '../pag-file';\n\nexport interface Matrix {\n  width: number;\n  height: number;\n  frameRate: number;\n  transform: Transform2D;\n  duration: number;\n  hasAlpha: boolean;\n  videoWidth: number;\n  videoHeight: number;\n  alphaStartX?: number;\n  alphaStartY?: number;\n}\n\nexport class VideoData {\n  public static create(file: PAGFile) {\n    if (!file) Log.error(ErrorCode.NotPagFile);\n    const videoData = new VideoData();\n    if (file.mainComposition.type() === CompositionType.Video) {\n      videoData.getVideoDataFromVideoComposition(file.mainComposition as VideoComposition);\n    } else if (file.mainComposition.type() === CompositionType.Vector) {\n      videoData.getVideoDataFromVectorComposition(file.mainComposition as VectorComposition);\n    }\n    return videoData;\n  }\n\n  public matrix: Matrix = {\n    width: 0,\n    height: 0,\n    frameRate: 0,\n    duration: 0,\n    hasAlpha: false,\n    transform: new Transform2D(),\n    videoWidth: 0,\n    videoHeight: 0,\n  };\n  public sequence: VideoSequence;\n\n  public getH264Raw() {\n    if (!this.sequence) Log.error(ErrorCode.NotSequence);\n    const header = this.sequence.headers.map((header) => header.data.data());\n    const body = this.sequence.frames.map((frame) => frame.fileBytes.data.data());\n    const buffers = [...header, ...body];\n    const h264Raw = concatArrayBuffers2Uint8Array(buffers);\n    return h264Raw;\n  }\n\n  public getTPS() {\n    if (!this.sequence) return;\n    const tps = this.sequence.frames.map((frame) => frame.frame);\n    return tps;\n  }\n\n  private getVideoDataFromVideoComposition(composition: VideoComposition) {\n    if (composition.sequences.length < 1) Log.error(ErrorCode.NotSequence);\n    this.matrix.width = composition.width;\n    this.matrix.height = composition.height;\n    this.matrix.frameRate = composition.frameRate;\n    this.matrix.duration = composition.duration;\n    this.matrix.videoWidth = composition.width;\n    this.matrix.videoHeight = composition.height;\n    this.matrix.hasAlpha = !!composition.hasAlpha;\n    const sequence = composition.sequences[composition.sequences.length - 1];\n    this.sequence = sequence;\n    this.matrix.transform = Transform2D.createDefaultTransform2D();\n  }\n\n  private getVideoDataFromVectorComposition(composition: VectorComposition) {\n    let sequencesCount = 0;\n    for (const layer of composition.layers) {\n      if (layer.type() !== LayerType.PreCompose) continue;\n\n      const composition = (layer as PreComposeLayer).composition as VideoComposition;\n      if (composition.type() === CompositionType.Video && composition.sequences.length >= 1) {\n        sequencesCount += 1;\n      }\n\n      if (sequencesCount > 1) {\n        Log.error(ErrorCode.NotSupportMultipleSequence);\n      }\n    }\n    if (sequencesCount < 1) {\n      Log.error(ErrorCode.NotSequence);\n    }\n\n    this.matrix.width = composition.width;\n    this.matrix.height = composition.height;\n    this.matrix.frameRate = composition.frameRate;\n    this.matrix.duration = composition.duration;\n\n    for (const layer of composition.layers) {\n      if (layer.type() !== LayerType.PreCompose) continue;\n\n      const videoComposition = (layer as PreComposeLayer).composition as VideoComposition;\n      if (videoComposition.type() !== CompositionType.Video && videoComposition.sequences.length < 1) continue;\n      this.matrix.videoWidth = videoComposition.width;\n      this.matrix.videoHeight = videoComposition.height;\n      this.matrix.hasAlpha = !!videoComposition.hasAlpha;\n      const sequence = videoComposition.sequences[videoComposition.sequences.length - 1];\n      this.sequence = sequence;\n      this.matrix.transform = (layer as PreComposeLayer).transform;\n      break;\n    }\n  }\n}\n","export const isPAGFile = (file: File) => /(?:pag)$/.test(file.name);\n","export class NALU {\n  public static NDR = 1;\n  public static IDR = 5;\n  public static SEI = 6;\n  public static SPS = 7;\n  public static PPS = 8;\n  public static AUD = 9;\n\n  public static SLICE_TYPE_P: 5;\n  public static SLICE_TYPE_B: 6;\n  public static SLICE_TYPE_I: 7;\n\n  public static get TYPES() {\n    return {\n      [NALU.IDR]: 'IDR',\n      [NALU.SEI]: 'SEI',\n      [NALU.SPS]: 'SPS',\n      [NALU.PPS]: 'PPS',\n      [NALU.NDR]: 'NDR',\n      [NALU.AUD]: 'AUD',\n    };\n  }\n\n  public static getNaluType(nalu: NALU) {\n    if (nalu.nalUnitType in NALU.TYPES) {\n      return NALU.TYPES[nalu.nalUnitType];\n    }\n    return 'UNKNOWN';\n  }\n\n  public payload: Uint8Array;\n  public nalRefIdc: number;\n  public nalUnitType: number;\n  public isVcl: boolean;\n  public sliceType: number;\n  public firstMbInSlice: boolean;\n\n  constructor(data: Uint8Array) {\n    this.payload = data;\n    this.nalRefIdc = (this.payload[0] & 0x60) >> 5; // nal_ref_idc\n    this.nalUnitType = this.payload[0] & 0x1f;\n    this.isVcl = this.nalUnitType === 1 || this.nalUnitType === 5;\n    this.sliceType = 0; // slice_type\n    this.firstMbInSlice = false; // first_mb_in_slice\n  }\n\n  public toString() {\n    return `${NALU.TYPES[this.nalUnitType]}: NRI: ${this.nalRefIdc}`;\n  }\n\n  public isKeyframe() {\n    return this.nalUnitType === NALU.IDR;\n  }\n\n  public getPayloadSize() {\n    return this.payload.byteLength;\n  }\n\n  public getSize() {\n    return 4 + this.getPayloadSize();\n  }\n\n  public getData() {\n    const result = new Uint8Array(this.getSize());\n    const view = new DataView(result.buffer);\n    view.setUint32(0, this.getSize() - 4);\n    result.set(this.payload, 4);\n    return result;\n  }\n}\n","export class ExpGolomb {\n  private data: Uint8Array;\n  private index: number;\n  private bitLength: number;\n\n  constructor(data: Uint8Array) {\n    this.data = data;\n    this.index = 0;\n    this.bitLength = data.byteLength * 8;\n  }\n\n  public get bitsAvailable() {\n    return this.bitLength - this.index;\n  }\n\n  public skipBits(size: number) {\n    if (this.bitsAvailable < size) {\n      return false;\n    }\n    this.index += size;\n  }\n\n  public readBits(size: number, moveIndex = true) {\n    const result = this.getBits(size, this.index, moveIndex);\n    return result;\n  }\n\n  public skipLZ() {\n    let leadingZeroCount;\n    for (leadingZeroCount = 0; leadingZeroCount < this.bitLength - this.index; ++leadingZeroCount) {\n      if (this.getBits(1, this.index + leadingZeroCount, false) !== 0) {\n        this.index += leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n    return leadingZeroCount;\n  }\n\n  public skipUEG() {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  public skipEG() {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  public readUEG() {\n    const prefix = this.skipLZ();\n    return this.readBits(prefix + 1) - 1;\n  }\n\n  public readEG() {\n    const value = this.readUEG();\n    if (0x01 & value) {\n      return (1 + value) >>> 1;\n    }\n    return -1 * (value >>> 1);\n  }\n\n  public readBoolean() {\n    return this.readBits(1) === 1;\n  }\n\n  public readUByte(numberOfBytes = 1) {\n    return this.readBits(numberOfBytes * 8);\n  }\n\n  public readUShort() {\n    return this.readBits(16);\n  }\n\n  public readUInt() {\n    return this.readBits(32);\n  }\n\n  public readUE() {\n    let r = 0;\n    let i = 0;\n    while (this.readBits(1) === 0 && i < 32 && this.bitsAvailable) {\n      i += 1;\n    }\n    r = this.readBits(i);\n    r += (1 << i) - 1;\n    return r;\n  }\n\n  private getBits(size: number, offsetBits: number, moveIndex = true) {\n    if (this.bitsAvailable < size) {\n      return 0;\n    }\n    const offset = offsetBits % 8;\n    const byte = this.data[(offsetBits / 8) | 0] & (0xff >>> offset);\n    const bits = 8 - offset;\n    if (bits >= size) {\n      if (moveIndex) {\n        this.index += size;\n      }\n      return byte >> (bits - size);\n    }\n    if (moveIndex) {\n      this.index += bits;\n    }\n    const nextSize = size - bits;\n    return (byte << nextSize) | this.getBits(nextSize, offsetBits + bits, moveIndex);\n  }\n}\n","import { NALU } from './nalu';\nimport { ExpGolomb } from './exp-golomb';\nimport { Log } from '../base/utils/log';\nimport { ErrorCode } from '../base/utils/error-map';\nimport { VideoSequence } from '../base/video-sequence';\n\ntype Units = Array<NALU>;\nexport interface H264Frame {\n  units: Units;\n  isKeyFrame: boolean;\n}\nexport class H264Parser {\n  public static getNaluFromSequence(sequence: VideoSequence): Array<Uint8Array> {\n    return [\n      ...sequence.headers.map((header) => new Uint8Array(header.data.data(), 4)),\n      ...sequence.frames.map((frame) => new Uint8Array(frame.fileBytes.data.data(), 4)),\n    ];\n  }\n\n  public static getH264Frames(nalus): H264Frame[] {\n    if (nalus.length < 1) Log.error(ErrorCode.NotNalu);\n    const frames: H264Frame[] = [];\n    let units: Array<NALU> = [];\n    let isKeyFrame = false;\n    let isVcl = false;\n    for (const nalu of nalus) {\n      const unit = new NALU(nalu);\n      if (unit.nalUnitType === NALU.IDR || unit.nalUnitType === NALU.NDR) {\n        H264Parser.parseHeader(unit);\n      }\n      if (units.length && isVcl && (unit.firstMbInSlice || !unit.isVcl)) {\n        frames.push({ units, isKeyFrame });\n        units = [];\n        isKeyFrame = false;\n        isVcl = false;\n      }\n      units.push(unit);\n      isKeyFrame = isKeyFrame || unit.isKeyframe();\n      isVcl = isVcl || unit.isVcl;\n    }\n    if (units.length > 0) {\n      if (isVcl) {\n        frames.push({ units, isKeyFrame });\n      } else {\n        const last = frames.length - 1;\n        frames[last].units = frames[last].units.concat(units);\n      }\n    }\n    return frames;\n  }\n\n  public static parseHeader(nalu: NALU) {\n    const decoder = new ExpGolomb(nalu.payload);\n    decoder.readUByte(); // skip NALu type\n    nalu.firstMbInSlice = decoder.readUEG() === 0;\n    nalu.sliceType = decoder.readUEG();\n  }\n\n  public static parseSPS(nalu) {\n    const { width, height } = H264Parser.readSPS(nalu);\n    const sps = new Uint8Array(nalu);\n    let codec = 'avc1.';\n    const codecarray = new DataView(nalu.buffer, nalu.byteOffset + 1, 4);\n    for (let i = 0; i < 3; ++i) {\n      let h = codecarray.getUint8(i).toString(16);\n      if (h.length < 2) {\n        h = `0${h}`;\n      }\n      codec += h;\n    }\n    return { sps, codec, width, height };\n  }\n\n  public static skipScalingList(decoder, count) {\n    let lastScale = 8;\n    let nextScale = 8;\n    let deltaScale;\n    for (let j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = decoder.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  }\n\n  public static readSPS(data) {\n    const profileIdcMap = [100, 110, 122, 244, 44, 83, 86, 118, 128];\n    const decoder = new ExpGolomb(data);\n    let frameCropLeftOffset = 0;\n    let frameCropRightOffset = 0;\n    let frameCropTopOffset = 0;\n    let frameCropBottomOffset = 0;\n    let sarScale = 1;\n    let numRefFramesInPicOrderCntCycle;\n    let scalingListCount;\n    decoder.readBits(1); // forbidden_zero_bit\n    decoder.readBits(2); // nal_ref_idc\n    decoder.readBits(5); // nal_unit_type\n    const profileIdc = decoder.readUByte(); // profile_idc\n    decoder.readBits(6); // constraint_set[0-5]_flag, u(6)\n    decoder.readBits(2); // reserved_zero_3bits u(2),\n    decoder.readUByte(); // level_idc u(8)\n    decoder.readUE(); // seq_parameter_set_id\n\n    if (profileIdcMap.indexOf(profileIdc) > -1) {\n      const chromaFormatIdc = decoder.readUE();\n      if (chromaFormatIdc === 3) {\n        decoder.skipBits(1); // separate_colour_plane_flag\n      }\n      decoder.readUE(); // bit_depth_luma_minus8\n      decoder.readUE(); // bit_depth_chroma_minus8\n      decoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      const seqScalingMatrixPresentFlag = decoder.readBoolean();\n      if (seqScalingMatrixPresentFlag) {\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n        for (let i = 0; i < scalingListCount; ++i) {\n          if (decoder.readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              H264Parser.skipScalingList(decoder, 16);\n            } else {\n              H264Parser.skipScalingList(decoder, 64);\n            }\n          }\n        }\n      }\n    }\n    decoder.readUE(); // log2_max_frame_num_minus4\n    const picOrderCntType = decoder.readUE();\n    if (picOrderCntType === 0) {\n      decoder.readUE(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      decoder.skipBits(1); // delta_pic_order_always_zero_flag\n      decoder.readUE(); // offset_for_non_ref_pic\n      decoder.readUE(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = decoder.readUE();\n      for (let i = 0; i < numRefFramesInPicOrderCntCycle; ++i) {\n        decoder.readUE(); // offset_for_ref_frame[ i ]\n      }\n    }\n    decoder.readUE(); // max_num_ref_frames\n    decoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n    const picWidthInMbsMinus1 = decoder.readUE();\n    const picHeightInMapUnitsMinus1 = decoder.readUE();\n    const frameMbsOnlyFlag = decoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      decoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n    decoder.readBits(1); // direct_8x8_inference_flag\n    const frameCroppingFlag = decoder.readBoolean();\n    if (frameCroppingFlag) {\n      frameCropLeftOffset = decoder.readUE();\n      frameCropRightOffset = decoder.readUE();\n      frameCropTopOffset = decoder.readUE();\n      frameCropBottomOffset = decoder.readUE();\n    }\n    const vuiParametersPresentFlag = decoder.readBoolean();\n    if (vuiParametersPresentFlag) {\n      const aspectRatioInfoPresentFlag = decoder.readBoolean();\n      if (aspectRatioInfoPresentFlag) {\n        let sarRatio;\n        const aspectRatioIdc = decoder.readUByte();\n        switch (aspectRatioIdc) {\n          case 1:\n            sarRatio = [1, 1];\n            break;\n          case 2:\n            sarRatio = [12, 11];\n            break;\n          case 3:\n            sarRatio = [10, 11];\n            break;\n          case 4:\n            sarRatio = [16, 11];\n            break;\n          case 5:\n            sarRatio = [40, 33];\n            break;\n          case 6:\n            sarRatio = [24, 11];\n            break;\n          case 7:\n            sarRatio = [20, 11];\n            break;\n          case 8:\n            sarRatio = [32, 11];\n            break;\n          case 9:\n            sarRatio = [80, 33];\n            break;\n          case 10:\n            sarRatio = [18, 11];\n            break;\n          case 11:\n            sarRatio = [15, 11];\n            break;\n          case 12:\n            sarRatio = [64, 33];\n            break;\n          case 13:\n            sarRatio = [160, 99];\n            break;\n          case 14:\n            sarRatio = [4, 3];\n            break;\n          case 15:\n            sarRatio = [3, 2];\n            break;\n          case 16:\n            sarRatio = [2, 1];\n            break;\n          case 255: {\n            sarRatio = [\n              (decoder.readUByte() << 8) | decoder.readUByte(),\n              (decoder.readUByte() << 8) | decoder.readUByte(),\n            ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      width: Math.ceil(\n        ((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale,\n      ),\n      height:\n        (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 -\n        (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),\n    };\n  }\n}\n","import { Mp4Track } from './h264-remuxer';\n\nconst CORRECTION_UTC = 2082873600; // 1904-01-01 与 1970-1-1 相差的秒数\n\nconst decimal2HexadecimalArray = (payload: number) => [\n  payload >> 24,\n  (payload >> 16) & 0xff,\n  (payload >> 8) & 0xff,\n  payload & 0xff,\n];\n\nconst getCharCode = (name: string) => [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n\nexport class Mp4Generator {\n  private static hdlrTypes = {\n    video: new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x76,\n      0x69,\n      0x64,\n      0x65, // handler_type: 'vide'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x56,\n      0x69,\n      0x64,\n      0x65,\n      0x6f,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'VideoHandler'\n    ]),\n    audio: new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x73,\n      0x6f,\n      0x75,\n      0x6e, // handler_type: 'soun'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x53,\n      0x6f,\n      0x75,\n      0x6e,\n      0x64,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'SoundHandler'\n    ]),\n  };\n\n  private static fullbox = new Uint8Array([\n    0x00, // version\n    0x00,\n    0x00,\n    0x00, // flags\n    0x00,\n    0x00,\n    0x00,\n    0x00, // entry_count\n  ]);\n\n  private static stsc = Mp4Generator.fullbox;\n\n  private static stco = Mp4Generator.fullbox;\n\n  private static stsz = new Uint8Array([\n    0x00, // version\n    0x00,\n    0x00,\n    0x00, // flags\n    0x00,\n    0x00,\n    0x00,\n    0x00, // sample_size\n    0x00,\n    0x00,\n    0x00,\n    0x00, // sample_count\n  ]);\n\n  private static vmhd = new Uint8Array([\n    0x00, // version\n    0x00,\n    0x00,\n    0x01, // flags\n    0x00,\n    0x00, // graphicsmode\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00, // opcolor\n  ]);\n\n  private static smhd = new Uint8Array([\n    0x00, // version\n    0x00,\n    0x00,\n    0x00, // flags\n    0x00,\n    0x00, // balance\n    0x00,\n    0x00, // reserved\n  ]);\n\n  private static stsd = new Uint8Array([\n    0x00, // version 0\n    0x00,\n    0x00,\n    0x00, // flags\n    0x00,\n    0x00,\n    0x00,\n    0x01, // entry_count\n  ]);\n\n  private static box(type: any[], ...payload: Uint8Array[]): Uint8Array {\n    let size = 8;\n    let i = payload.length;\n    const len = i;\n    while (i) {\n      i -= 1;\n      size += payload[i].byteLength;\n    }\n    const result = new Uint8Array(size);\n    result[0] = (size >> 24) & 0xff;\n    result[1] = (size >> 16) & 0xff;\n    result[2] = (size >> 8) & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4);\n    // copy the payload into the result\n    for (i = 0, size = 8; i < len; ++i) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n\n  private types = {\n    avc1: [],\n    avcC: [],\n    btrt: [],\n    ctts: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [],\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    stss: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: [],\n    smhd: [],\n  };\n\n  private dinf: Uint8Array;\n\n  constructor() {\n    Object.keys(this.types).forEach((type) => {\n      if (Object.prototype.hasOwnProperty.call(this.types, type)) {\n        this.types[type] = getCharCode(type);\n      }\n    });\n\n    const dref = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01, // entry_count\n      0x00,\n      0x00,\n      0x00,\n      0x0c, // entry_size\n      0x75,\n      0x72,\n      0x6c,\n      0x20, // 'url' type\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x01, // entry_flags\n    ]);\n    this.dinf = Mp4Generator.box(this.types.dinf, Mp4Generator.box(this.types.dref, dref));\n  }\n\n  public ftyp() {\n    const majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n    const avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n    const minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n    return Mp4Generator.box(\n      this.types.ftyp,\n      majorBrand,\n      minorVersion,\n      majorBrand,\n      avc1Brand,\n      new Uint8Array(getCharCode('mp41')),\n    );\n  }\n\n  public moov(tracks: Mp4Track[], duration: number, timescale: number) {\n    let i = tracks.length;\n    const boxes = [];\n\n    while (i) {\n      i -= 1;\n      boxes[i] = this.trak(tracks[i]);\n    }\n\n    return Mp4Generator.box.apply(\n      null,\n      [this.types.moov, this.mvhd(timescale, duration)].concat(boxes).concat(this.mvex(tracks)),\n    );\n  }\n\n  public moof(sequence_number: number, baseMediaDecodeTime: number, track: Mp4Track) {\n    return Mp4Generator.box(this.types.moof, this.mfhd(sequence_number), this.traf(baseMediaDecodeTime, track));\n  }\n\n  public mdat(data: Uint8Array) {\n    return Mp4Generator.box(this.types.mdat, data);\n  }\n\n  private hdlr(type: string) {\n    return Mp4Generator.box(this.types.hdlr, Mp4Generator.hdlrTypes[type]);\n  }\n\n  private mdhd(timescale: number, duration: number) {\n    return Mp4Generator.box(\n      this.types.mdhd,\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        ...decimal2HexadecimalArray(Math.floor(Date.now() / 1000 + CORRECTION_UTC)), // creation_time\n        ...decimal2HexadecimalArray(Math.floor(Date.now() / 1000 + CORRECTION_UTC)), // modification_time\n        ...decimal2HexadecimalArray(timescale), // timescale\n        ...decimal2HexadecimalArray(duration), // duration\n        0x55,\n        0xc4, // 'und' language (undetermined)\n        0x00,\n        0x00,\n      ]),\n    );\n  }\n\n  private mdia(track: Mp4Track) {\n    return Mp4Generator.box(\n      this.types.mdia,\n      this.mdhd(track.timescale, track.duration),\n      this.hdlr(track.type),\n      this.minf(track),\n    );\n  }\n\n  private mfhd(sequenceNumber: number) {\n    return Mp4Generator.box(\n      this.types.mfhd,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00,\n        0x00, // flags\n        sequenceNumber >> 24,\n        (sequenceNumber >> 16) & 0xff,\n        (sequenceNumber >> 8) & 0xff,\n        sequenceNumber & 0xff, // sequence_number\n      ]),\n    );\n  }\n\n  private minf(track: Mp4Track) {\n    if (track.type === 'audio') {\n      return Mp4Generator.box(\n        this.types.minf,\n        Mp4Generator.box(this.types.smhd, Mp4Generator.smhd),\n        this.dinf,\n        this.stbl(track),\n      );\n    }\n    return Mp4Generator.box(\n      this.types.minf,\n      Mp4Generator.box(this.types.vmhd, Mp4Generator.vmhd),\n      this.dinf,\n      this.stbl(track),\n    );\n  }\n\n  private mvex(tracks: Mp4Track[]) {\n    let i = tracks.length;\n    const boxes = [];\n\n    while (i) {\n      i -= 1;\n      boxes[i] = this.trex(tracks[i]);\n    }\n    return Mp4Generator.box.apply(null, [this.types.mvex].concat(boxes));\n  }\n\n  private mvhd(timescale: number, duration: number) {\n    const bytes = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      ...decimal2HexadecimalArray(Math.floor(Date.now() / 1000 + CORRECTION_UTC)), // creation_time\n      ...decimal2HexadecimalArray(Math.floor(Date.now() / 1000 + CORRECTION_UTC)), // modification_time\n      ...decimal2HexadecimalArray(timescale), // timescale\n      ...decimal2HexadecimalArray(duration), // duration\n      0x00,\n      0x01,\n      0x00,\n      0x00, // 1.0 rate\n      0x01,\n      0x00, // 1.0 volume\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x40,\n      0x00,\n      0x00,\n      0x00, // transformation: unity matrix\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x00,\n      0x00,\n      0x00,\n      0x02, // next_track_ID\n    ]);\n    return Mp4Generator.box(this.types.mvhd, bytes);\n  }\n\n  private sdtp(track: Mp4Track) {\n    const samples = track.samples || [];\n    const bytes = new Uint8Array(4 + samples.length);\n    let flags;\n    let i;\n    // leave the full box header (4 bytes) all zero\n    // write the sample table\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = (flags.dependsOn << 4) | (flags.isDependedOn << 2) | flags.hasRedundancy;\n    }\n\n    return Mp4Generator.box(this.types.sdtp, bytes);\n  }\n\n  private stbl(track: Mp4Track) {\n    return Mp4Generator.box(\n      this.types.stbl,\n      this.stsd(track),\n      this.stts(track),\n      this.ctts(track),\n      this.stss(track),\n      Mp4Generator.box(this.types.stsc, Mp4Generator.stsc),\n      Mp4Generator.box(this.types.stsz, Mp4Generator.stsz),\n      Mp4Generator.box(this.types.stco, Mp4Generator.stco),\n    );\n  }\n\n  private avc1(track: Mp4Track) {\n    let sps = [];\n    let pps = [];\n    let i;\n    let data;\n    let len;\n    // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push((len >>> 8) & 0xff);\n      sps.push(len & 0xff);\n      sps = sps.concat(Array.prototype.slice.call(data)); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push((len >>> 8) & 0xff);\n      pps.push(len & 0xff);\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    const avcc = Mp4Generator.box(\n      this.types.avcC,\n      new Uint8Array(\n        [\n          0x01, // version\n          sps[3], // profile\n          sps[4], // profile compat\n          sps[5], // level\n          0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n          0xe0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\n        ]\n          .concat(sps)\n          .concat([\n            track.pps.length, // numOfPictureParameterSets\n          ])\n          .concat(pps),\n      ),\n    ); // \"PPS\"\n    const { width } = track;\n    const { height } = track;\n    return Mp4Generator.box(\n      this.types.avc1,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        (width >> 8) & 0xff,\n        width & 0xff, // width\n        (height >> 8) & 0xff,\n        height & 0xff, // height\n        0x00,\n        0x48,\n        0x00,\n        0x00, // horizresolution\n        0x00,\n        0x48,\n        0x00,\n        0x00, // vertresolution\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // frame_count\n        0x12,\n        0x62,\n        0x69,\n        0x6e,\n        0x65, // binelpro.ru\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // compressorname\n        0x00,\n        0x18, // depth = 24\n        0xff,\n        0xff,\n      ]), // pre_defined = -1\n      avcc,\n    );\n  }\n\n  private esds(track) {\n    const configlen = track.config.byteLength;\n    const data = new Uint8Array(26 + configlen + 3);\n    data.set([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x03, // descriptor_type\n      0x17 + configlen, // length\n      0x00,\n      0x01, // es_id\n      0x00, // stream_priority\n      0x04, // descriptor_type\n      0x0f + configlen, // length\n      0x40, // codec : mpeg4_audio\n      0x15, // stream_type\n      0x00,\n      0x00,\n      0x00, // buffer_size\n      0x00,\n      0x00,\n      0x00,\n      0x00, // maxBitrate\n      0x00,\n      0x00,\n      0x00,\n      0x00, // avgBitrate\n      0x05, // descriptor_type\n      configlen,\n    ]);\n    data.set(track.config, 26);\n    data.set([0x06, 0x01, 0x02], 26 + configlen);\n    return data;\n  }\n\n  private mp4a(track) {\n    const { audiosamplerate } = track;\n    return Mp4Generator.box(\n      this.types.mp4a,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        track.channelCount, // channelcount\n        0x00,\n        0x10, // sampleSize:16bits\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved2\n        (audiosamplerate >> 8) & 0xff,\n        audiosamplerate & 0xff, //\n        0x00,\n        0x00,\n      ]),\n      Mp4Generator.box(this.types.esds, this.esds(track)),\n    );\n  }\n\n  private stsd(track: Mp4Track) {\n    if (track.type === 'audio') {\n      return Mp4Generator.box(this.types.stsd, Mp4Generator.stsd, this.mp4a(track));\n    }\n    return Mp4Generator.box(this.types.stsd, Mp4Generator.stsd, this.avc1(track));\n  }\n\n  private tkhd(track) {\n    return Mp4Generator.box(\n      this.types.tkhd,\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x01, // flags\n        ...decimal2HexadecimalArray(Math.floor(Date.now() / 1000 + CORRECTION_UTC)), // creation_time\n        ...decimal2HexadecimalArray(Math.floor(Date.now() / 1000 + CORRECTION_UTC)), // modification_time\n        ...decimal2HexadecimalArray(track.id), // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        ...decimal2HexadecimalArray(track.duration), // duration\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00, // layer\n        0x00,\n        0x00, // alternate_group\n        (track.volume >> 0) & 0xff,\n        (((track.volume % 1) * 10) >> 0) & 0xff, // track volume // FIXME\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x40,\n        0x00,\n        0x00,\n        0x00, // transformation: unity matrix\n        (track.width >> 8) & 0xff,\n        track.width & 0xff,\n        0x00,\n        0x00, // width\n        (track.height >> 8) & 0xff,\n        track.height & 0xff,\n        0x00,\n        0x00, // height\n      ]),\n    );\n  }\n\n  private traf(baseMediaDecodeTime: number, track: Mp4Track) {\n    const sampleDependencyTable = this.sdtp(track);\n    const { id } = track;\n    return Mp4Generator.box(\n      this.types.traf,\n      Mp4Generator.box(\n        this.types.tfhd,\n        new Uint8Array([\n          0x00, // version 0\n          0x00,\n          0x00,\n          0x00, // flags\n          id >> 24,\n          (id >> 16) & 0xff,\n          (id >> 8) & 0xff,\n          id & 0xff, // track_ID\n        ]),\n      ),\n      Mp4Generator.box(\n        this.types.tfdt,\n        new Uint8Array([\n          0x00, // version 0\n          0x00,\n          0x00,\n          0x00, // flags\n          baseMediaDecodeTime >> 24,\n          (baseMediaDecodeTime >> 16) & 0xff,\n          (baseMediaDecodeTime >> 8) & 0xff,\n          baseMediaDecodeTime & 0xff, // baseMediaDecodeTime\n        ]),\n      ),\n      this.trun(\n        track,\n        sampleDependencyTable.length +\n          16 + // tfhd\n          16 + // tfdt\n          8 + // traf header\n          16 + // mfhd\n          8 + // moof header\n          8,\n      ), // mdat header\n      sampleDependencyTable,\n    );\n  }\n\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n  private trak(track: Mp4Track) {\n    track.duration = track.duration || 0xffffffff;\n    return Mp4Generator.box(this.types.trak, this.tkhd(track), this.mdia(track));\n  }\n\n  private trex(track: Mp4Track) {\n    const { id } = track;\n    return Mp4Generator.box(\n      this.types.trex,\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        id >> 24,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x01, // default_sample_description_index\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_duration\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_size\n        0x00,\n        0x01,\n        0x00,\n        0x01, // default_sample_flags\n      ]),\n    );\n  }\n\n  private trun(track: Mp4Track, offset: number) {\n    const samples = track.samples || [];\n    const len = samples.length;\n    const arraylen = 12 + 16 * len;\n    const array = new Uint8Array(arraylen);\n    let i;\n    let sample;\n    let duration;\n    let size;\n    let flags;\n    let cts;\n    offset += 8 + arraylen;\n    array.set(\n      [\n        0x00, // version 0\n        0x00,\n        0x0f,\n        0x01, // flags\n        (len >>> 24) & 0xff,\n        (len >>> 16) & 0xff,\n        (len >>> 8) & 0xff,\n        len & 0xff, // sample_count\n        (offset >>> 24) & 0xff,\n        (offset >>> 16) & 0xff,\n        (offset >>> 8) & 0xff,\n        offset & 0xff, // data_offset\n      ],\n      0,\n    );\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set(\n        [\n          (duration >>> 24) & 0xff,\n          (duration >>> 16) & 0xff,\n          (duration >>> 8) & 0xff,\n          duration & 0xff, // sample_duration\n          (size >>> 24) & 0xff,\n          (size >>> 16) & 0xff,\n          (size >>> 8) & 0xff,\n          size & 0xff, // sample_size\n          (flags.isLeading << 2) | flags.dependsOn,\n          (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | (flags.paddingValue << 1) | flags.isNonSync,\n          flags.degradPrio & (0xf0 << 8),\n          flags.degradPrio & 0x0f, // sample_flags\n          (cts >>> 24) & 0xff,\n          (cts >>> 16) & 0xff,\n          (cts >>> 8) & 0xff,\n          cts & 0xff, // sample_composition_time_offset\n        ],\n        12 + 16 * i,\n      );\n    }\n    return Mp4Generator.box(this.types.trun, array);\n  }\n\n  private stts(track: Mp4Track) {\n    const sampleCount = track.samples.length;\n    const sampleDelta = track.duration / sampleCount;\n    const buffer = [\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      ...decimal2HexadecimalArray(1), // entry_count\n      ...decimal2HexadecimalArray(sampleCount), // sample_count\n      ...decimal2HexadecimalArray(sampleDelta), // sample_offset\n    ];\n    return Mp4Generator.box(this.types.stts, new Uint8Array(buffer));\n  }\n\n  private ctts(track: Mp4Track) {\n    const sampleCount = track.tps.length;\n    const sampleDelta = track.duration / sampleCount;\n    const buffer = [\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      ...decimal2HexadecimalArray(sampleCount), // entry_count\n    ];\n    for (let i = 0; i < sampleCount; i++) {\n      buffer.push(...decimal2HexadecimalArray(1)); // sample_count\n      const dts = i * sampleDelta;\n      const pts = track.tps[i] * sampleDelta;\n      buffer.push(...decimal2HexadecimalArray(pts - dts)); // sample_offset\n    }\n    return Mp4Generator.box(this.types.ctts, new Uint8Array(buffer));\n  }\n\n  private stss(track: Mp4Track) {\n    const iFrames = track.samples.filter((sample) => sample.flags.isKeyFrame).map((sample) => sample.index + 1);\n    const buffer = [\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      ...decimal2HexadecimalArray(iFrames.length),\n    ];\n    for (const iFrame of iFrames) {\n      buffer.push(...decimal2HexadecimalArray(iFrame));\n    }\n    return Mp4Generator.box(this.types.stss, new Uint8Array(buffer));\n  }\n}\n","import { VideoData } from '../file/video-data';\nimport { H264Frame, H264Parser } from './h264-parser';\nimport { NALU } from './nalu';\nimport { Mp4Generator } from './mp4-generator';\nimport { concatUint8Arrays } from '../codec/utils/byte-utils';\nimport { Log } from '../base/utils/log';\nimport { ErrorCode } from '../base/utils/error-map';\n\nconst NALU_BASE_TPYES = [NALU.SPS, NALU.PPS, NALU.IDR, NALU.NDR]; // 只解析基础 NALU\nconst SEQUENCE_NUMBER = 1;\nconst BASE_MEDIA_DECODE_TIME = 0;\n\nexport interface Sample {\n  units: NALU[];\n  size: number;\n  keyFrame: boolean;\n}\n\nexport interface Mp4Sample {\n  index: number;\n  size: number;\n  duration: number;\n  cts: number;\n  flags: {\n    isLeading: number;\n    isDependedOn: number;\n    hasRedundancy: number;\n    degradPrio: number;\n    isNonSync: number;\n    dependsOn: number;\n    isKeyFrame: boolean;\n  };\n}\n\nexport interface Mp4Track {\n  id: number;\n  type: string;\n  len: number;\n  fragmented: boolean;\n  sps: Uint8Array[];\n  pps: Uint8Array[];\n  width: number;\n  height: number;\n  timescale: number;\n  duration: number;\n  samples: Mp4Sample[];\n  tps: number[];\n  codec: string;\n  fps: number;\n}\n\nlet trackId = 1;\n\nexport class H264Remuxer {\n  public static getTrackID() {\n    const id = trackId;\n    trackId += 1;\n    return id;\n  }\n\n  public static remux(frames: H264Frame[], videoData: VideoData) {\n    if (frames.length < 1) Log.error(ErrorCode.NotFrames);\n    const remuxer = new H264Remuxer();\n    remuxer.mp4track.timescale = frames.length;\n    remuxer.mp4track.duration = Math.floor((frames.length / videoData.matrix.frameRate) * frames.length);\n    remuxer.mp4track.fps = videoData.matrix.frameRate;\n    remuxer.mp4track.tps = videoData.getTPS();\n    let readyToDecode = false;\n\n    for (const frame of frames) {\n      const units = frame.units.filter((unit) => NALU_BASE_TPYES.includes(unit.nalUnitType));\n      if (units.length < 1) continue;\n      const size = units.reduce((pre, cur) => pre + cur.getSize(), 0);\n      if (!remuxer.mp4track.sps) {\n        units.forEach((unit) => {\n          if (unit.nalUnitType === NALU.SPS) {\n            const { sps, codec, width, height } = H264Parser.parseSPS(unit.payload);\n            remuxer.mp4track.width = width;\n            remuxer.mp4track.height = height;\n            remuxer.mp4track.sps = [sps];\n            remuxer.mp4track.codec = codec;\n          }\n        });\n        if (remuxer.mp4track.sps && remuxer.mp4track.pps) readyToDecode = true;\n      }\n      if (!remuxer.mp4track.pps) {\n        units.forEach((unit) => {\n          if (unit.nalUnitType === NALU.PPS) {\n            remuxer.mp4track.pps = [new Uint8Array(unit.payload)];\n          }\n        });\n        if (remuxer.mp4track.sps && remuxer.mp4track.pps) readyToDecode = true;\n      }\n      if (readyToDecode) {\n        remuxer.mp4track.len += size;\n        remuxer.samples.push({\n          units,\n          size,\n          keyFrame: frame.isKeyFrame,\n        });\n      }\n    }\n    return remuxer;\n  }\n\n  public mp4track: Mp4Track = {\n    id: H264Remuxer.getTrackID(),\n    type: 'video',\n    len: 0,\n    fragmented: true,\n    sps: undefined,\n    pps: undefined,\n    width: 0,\n    height: 0,\n    timescale: 0,\n    duration: 0,\n    samples: [],\n    tps: [],\n    codec: '',\n    fps: 0,\n  };\n  public samples: Sample[] = [];\n\n  public convertMp4() {\n    const payload = this.getPayload();\n    if (!payload) return;\n    const mp4Generator = new Mp4Generator();\n    const ftyp = mp4Generator.ftyp();\n    const moov = mp4Generator.moov([this.mp4track], this.mp4track.duration, this.mp4track.timescale);\n    const moof = mp4Generator.moof(SEQUENCE_NUMBER, BASE_MEDIA_DECODE_TIME, this.mp4track);\n    const mdat = mp4Generator.mdat(payload);\n\n    return concatUint8Arrays([ftyp, moov, moof, mdat]);\n  }\n\n  private getPayload() {\n    const payload = new Uint8Array(this.mp4track.len);\n    const sampleDelta = Math.floor(this.mp4track.duration / this.samples.length);\n    let offset = 0;\n    let count = 0;\n\n    for (const sample of this.samples) {\n      const { units } = sample;\n      const mp4Sample: Mp4Sample = {\n        index: count,\n        size: sample.size,\n        duration: sampleDelta,\n        cts: this.mp4track.tps[count] * sampleDelta - count * sampleDelta,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          isNonSync: sample.keyFrame ? 0 : 1,\n          dependsOn: sample.keyFrame ? 2 : 1,\n          isKeyFrame: sample.keyFrame,\n        },\n      };\n\n      for (const unit of units) {\n        payload.set(unit.getData(), offset);\n        offset += unit.getSize();\n      }\n      this.mp4track.samples.push(mp4Sample);\n      count += 1;\n    }\n\n    if (!this.mp4track.samples.length) return;\n    return payload;\n  }\n}\n","import { Matrix, VideoData } from './file/video-data';\nimport { H264Parser } from './generator/h264-parser';\nimport { H264Remuxer } from './generator/h264-remuxer';\n\nexport interface Mp4Data {\n  matrix: Matrix;\n  sequenceInfo: SequenceInfo;\n  mp4Info: Mp4Info;\n  data: Uint8Array;\n  url?: string;\n}\n\nexport interface SequenceInfo {\n  width: number;\n  height: number;\n  frameCount: number;\n  alphaStartX: number;\n  alphaStartY: number;\n}\n\nexport interface Mp4Info {\n  width: number;\n  height: number;\n}\n\nexport class PAGGenerator {\n  public static generatorMP4(videoData: VideoData): Mp4Data {\n    const nalus = H264Parser.getNaluFromSequence(videoData.sequence);\n    const frames = H264Parser.getH264Frames(nalus);\n    const remuxer = H264Remuxer.remux(frames, videoData);\n    return {\n      matrix: videoData.matrix,\n      sequenceInfo: {\n        width: videoData.sequence.width,\n        height: videoData.sequence.height,\n        frameCount: videoData.sequence.frameCount,\n        alphaStartX: videoData.sequence.alphaStartX,\n        alphaStartY: videoData.sequence.alphaStartY,\n      },\n      mp4Info: {\n        width: remuxer.mp4track.width,\n        height: remuxer.mp4track.height,\n      },\n      data: remuxer.convertMp4(),\n    };\n  }\n}\n","import { PAGCodec } from './pag-codec';\nimport { Composition } from './base/composition';\nimport { ImageBytes } from './base/image-bytes';\nimport { request } from './base/utils/http-request';\nimport { Log } from './base/utils/log';\nimport { LayerType } from './base/layer';\nimport { VectorComposition } from './base/vector-composition';\nimport { ByteArray } from './codec/utils/byte-array';\nimport { CompositionType } from './codec/types';\nimport { TimeRange } from './base/time-range';\nimport { PreComposeLayer } from './base/pre-compose-layer';\nimport { VideoData } from './file/video-data';\nimport { isPAGFile } from './file/utils';\nimport { ErrorCode } from './base/utils/error-map';\nimport { Mp4Data, PAGGenerator } from './pag-generator';\n\nexport class PAGFile {\n  public static async loadFile(url: string | File): Promise<Mp4Data> {\n    let file: File;\n    if (typeof url === 'string' && url !== '') {\n      file = await this.loadFileByXHR(url);\n    } else if (url instanceof File && isPAGFile(url)) {\n      file = url;\n    } else {\n      Log.error(ErrorCode.InputError);\n    }\n    const pagFile = await this.readFileAsPAGFile(file);\n    const videoData = PAGFile.pagFile2videoData(pagFile);\n    return PAGGenerator.generatorMP4(videoData);\n  }\n\n  public static loadFileByXHR(url: string): Promise<File> {\n    return new Promise((resolve) => {\n      request({\n        url,\n        method: 'GET',\n        responseType: 'blob',\n        success: (response: Blob) => {\n          if (!response) {\n            Log.error(ErrorCode.LoadFileNotResponse);\n          }\n          const file = new window.File([response], url.replace(/(.*\\/)*([^.]+)/i, '$2'));\n          resolve(file);\n        },\n        error: () => {\n          Log.error(ErrorCode.LoadFileByXhrError);\n        },\n      });\n    });\n  }\n\n  public static readFileAsPAGFile(file: File): Promise<PAGFile> {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const dataBuffer: ArrayBuffer = reader.result as ArrayBuffer;\n        const byteArray = new ByteArray(dataBuffer, true);\n        const { compositions, images, tagLevel } = PAGCodec.decode(byteArray);\n        const pagFile = new PAGFile(compositions, images);\n        pagFile.tagLevel = tagLevel;\n        resolve(pagFile);\n      };\n      reader.onerror = () => {\n        Log.error(ErrorCode.ReadPagFileError);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  public static pagFile2videoData(file: PAGFile) {\n    return VideoData.create(file);\n  }\n  public tagLevel = 1;\n  public mainComposition: Composition;\n  public compositions: Array<Composition> = [];\n  public numLayers = 0;\n  public images: Array<ImageBytes> = [];\n  public duration: number;\n  public implDuration: number;\n  public scaledTimeRange: TimeRange = { start: 0, end: 0 };\n  public rootLayer: PreComposeLayer;\n\n  constructor(compositions: Array<Composition>, images: Array<ImageBytes>) {\n    this.mainComposition = compositions[compositions.length - 1];\n    this.scaledTimeRange.start = 0;\n    this.scaledTimeRange.end = this.mainComposition.duration;\n    this.compositions = compositions;\n    this.images = images;\n    this.duration = this.mainComposition.duration;\n    this.implDuration = (this.mainComposition.duration * 1000) / this.mainComposition.frameRate;\n    for (const composition of compositions) {\n      if (composition.type() !== CompositionType.Vector) {\n        this.numLayers += 1;\n        continue;\n      }\n      for (const layer of (composition as VectorComposition).layers) {\n        if (layer.type() === LayerType.PreCompose) {\n          continue;\n        }\n        this.numLayers += 1;\n      }\n    }\n  }\n}\n","export enum RenderingMode {\n  Canvas = 'Canvas',\n  WebGL = 'WebGL',\n}\n\nexport enum EventName {\n  beforeFlush = 'beforeFlush',\n  afterFlush = 'afterFlush',\n  onAnimationStart = 'onAnimationStart',\n  onAnimationEnd = 'onAnimationEnd',\n  onAnimationCancel = 'onAnimationCancel',\n  onAnimationRepeat = 'onAnimationRepeat',\n}\n\nexport enum ScaleMode {\n  None = 'None',\n  /**\n   * 拉伸内容到适应画布\n   */\n  Stretch = 'Stretch',\n  /**\n   * 根据原始比例缩放内容\n   */\n  LetterBox = 'LetterBox',\n  /**\n   * 根据原始比例被缩放适应，一个轴会被裁剪\n   */\n  Zoom = 'Zoom',\n}\n","import { Log } from '../base/utils/log';\nimport { Mp4Data } from '../pag-generator';\nimport { AlphaVideoAttributes } from '../pag-view';\n\nexport const detectWebGLContext = () => {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  const context3D: RenderingContext | null = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  return !!context3D;\n};\n\nexport const createProgram = (\n  context3D: WebGLRenderingContext,\n  vertexShaderSource: string,\n  fragmentShaderSource: string,\n) => {\n  const program = context3D.createProgram();\n\n  const vshader = createShader(context3D, vertexShaderSource, context3D.VERTEX_SHADER);\n  const fshader = createShader(context3D, fragmentShaderSource, context3D.FRAGMENT_SHADER);\n  context3D.attachShader(program, vshader);\n  // gl.deleteShader(vshader);\n  context3D.attachShader(program, fshader);\n  // gl.deleteShader(fshader);\n  context3D.linkProgram(program);\n\n  const programMessage = context3D.getProgramInfoLog(program);\n  if (programMessage) Log.log(programMessage);\n  const vshaderMessage = context3D.getShaderInfoLog(vshader);\n  if (vshaderMessage) Log.log(vshaderMessage);\n  const fshaderMessage = context3D.getShaderInfoLog(fshader);\n  if (fshaderMessage) Log.log(fshaderMessage);\n\n  return program;\n};\n\nconst createShader = (context3D: WebGLRenderingContext, source: string, type: GLenum) => {\n  const shader = context3D.createShader(type);\n  context3D.shaderSource(shader, source);\n  context3D.compileShader(shader);\n  return shader;\n};\n\nexport const getShaderSourceFromString = (str: string) => str.replace(/^\\s+|\\s+$/g, '');\n\nexport const getVideoAttributes = (mp4Data: Mp4Data) => {\n  const attribute: AlphaVideoAttributes = {\n    width: 0,\n    height: 0,\n    videoWidth: 0,\n    videoHeight: 0,\n    hasAlpha: false,\n    alphaStartX: 0,\n    alphaStartY: 0,\n    sequenceWidth: 0,\n    sequenceHeight: 0,\n    sequenceScale: { width: 0, height: 0 },\n    position: { x: 0, y: 0 },\n    mp4Width: 0,\n    mp4Height: 0,\n  };\n  attribute.width = mp4Data.matrix.width;\n  attribute.height = mp4Data.matrix.height;\n  attribute.videoWidth = mp4Data.matrix.videoWidth;\n  attribute.videoHeight = mp4Data.matrix.videoHeight;\n  attribute.hasAlpha = mp4Data.matrix.hasAlpha;\n  if (attribute.hasAlpha) {\n    attribute.alphaStartX = mp4Data.sequenceInfo.alphaStartX;\n    attribute.alphaStartY = mp4Data.sequenceInfo.alphaStartY;\n  }\n  attribute.sequenceWidth = mp4Data.sequenceInfo.width;\n  attribute.sequenceHeight = mp4Data.sequenceInfo.height;\n  attribute.sequenceScale = {\n    width: attribute.videoWidth / attribute.sequenceWidth,\n    height: attribute.videoHeight / attribute.sequenceHeight,\n  };\n  attribute.position = {\n    x: mp4Data.matrix.transform.position.value.x - mp4Data.matrix.transform.anchorPoint.value.x,\n    y: mp4Data.matrix.transform.position.value.y - mp4Data.matrix.transform.anchorPoint.value.y,\n  };\n  return attribute;\n};\n","export const VERTEX_2D_SHADER = `\n      attribute vec2 a_position;\n      attribute vec2 a_texCoord;\n      \n      uniform vec2 u_resolution;\n      uniform vec2 u_scale;\n      \n      varying vec2 v_texCoord;\n    \n      \n      void main() {\n         vec2 scaledPosition = a_position * u_scale;\n\n         // convert the rectangle from pixels to 0.0 to 1.0\n         vec2 zeroToOne = scaledPosition / u_resolution;\n      \n         // convert from 0->1 to 0->2\n         vec2 zeroToTwo = zeroToOne * 2.0;\n      \n         // convert from 0->2 to -1->+1 (clipspace)\n         vec2 clipSpace = zeroToTwo - 1.0;\n      \n         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n      \n         // pass the texCoord to the fragment shader\n         // The GPU will interpolate this value between points.\n         v_texCoord = a_texCoord;\n      }\n        `;\n\nexport const FRAGMENT_2D_SHADER = `\n      precision mediump float;\n\n      // our texture\n      uniform sampler2D u_image;\n      \n      // the texCoords passed in from the vertex shader.\n      varying vec2 v_texCoord;\n      \n      void main() {\n         gl_FragColor = texture2D(u_image, v_texCoord);\n      }\n         `;\nexport const FRAGMENT_2D_SHADER_TRANSPARENT = `\n      precision mediump float;\n      // our texture\n      uniform sampler2D u_image;\n      \n      // the texCoords passed in from the vertex shader.\n      varying vec2 v_texCoord;\n      uniform vec2 v_alphaStart;\n      \n      void main() {\n         vec4 color = texture2D(u_image, v_texCoord);\n         vec4 alpha = texture2D(u_image, vec2(v_texCoord.x + v_alphaStart.x, v_texCoord.y + v_alphaStart.y));\n         gl_FragColor = vec4(color.rgb * alpha.r, alpha.r);\n      }     \n         `;\n","export type Listener = (...payload: any) => void;\n\ninterface ListenersMap {\n  [propName: string]: Listener[];\n}\n\nexport class EventManager {\n  private listenersMap: ListenersMap;\n\n  constructor() {\n    this.listenersMap = {};\n  }\n\n  on(evnetName: string, linstener: Listener) {\n    if (this.listenersMap[evnetName] === undefined) {\n      this.listenersMap[evnetName] = [];\n    }\n    this.listenersMap[evnetName].push(linstener);\n    return;\n  }\n\n  off(evnetName: string, linstener?: Listener) {\n    const listenerList: Listener[] = this.listenersMap[evnetName];\n    if (listenerList === undefined) return;\n    if (linstener === undefined) {\n      delete this.listenersMap[evnetName];\n      return;\n    }\n    const index = listenerList.findIndex((fn: Listener) => fn === linstener);\n    listenerList.splice(index, 1);\n    return;\n  }\n\n  emit(evnetName: string, ...payload: any): boolean {\n    const listenerList: Listener[] = this.listenersMap[evnetName];\n    if (listenerList === undefined || listenerList.length < 1) return false;\n    for (const listener of listenerList) {\n      listener(...payload);\n    }\n    return true;\n  }\n}\n","import { RenderingMode, EventName, ScaleMode } from './view/types';\nimport { detectWebGLContext, createProgram, getShaderSourceFromString, getVideoAttributes } from './view/utils';\nimport { VERTEX_2D_SHADER, FRAGMENT_2D_SHADER, FRAGMENT_2D_SHADER_TRANSPARENT } from './view/shader';\nimport { Log } from './base/utils/log';\nimport { ErrorCode } from './base/utils/error-map';\nimport { Mp4Data } from './pag-generator';\nimport { EventManager, Listener } from './base/utils/event-manager';\n\ndeclare global {\n  interface Window {\n    WebKitMediaSource: any;\n  }\n}\n\nexport interface RenderOptions {\n  renderingMode?: RenderingMode;\n  scaleMode?: ScaleMode;\n  /**\n   * 设置动画重复的次数。默认值为 1，只播放一次。如为 0 动画则无限播放。\n   */\n  repeatCount?: number;\n}\n\nexport interface AlphaVideoAttributes {\n  width: number; // PAG画布宽度\n  height: number; // PAG画布高度\n  videoWidth: number; // VideoComposition宽度\n  videoHeight: number; // VideoComposition高度\n  hasAlpha: boolean; // 是否有Alpha通道\n  alphaStartX: number; // Alpha通道 X轴坐标\n  alphaStartY: number; // Alpha通道 Y轴坐标\n  sequenceWidth: number; // Sequence宽度\n  sequenceHeight: number; // Sequence高度\n  sequenceScale: { width: number; height: number }; // Sequence需要缩放大小\n  position: { x: number; y: number }; // VideoComposition在PAG画布上的坐标\n  mp4Width: number; // Mp4 video宽度\n  mp4Height: number; // Mp4 video高度\n}\n\nexport class PAGView {\n  /**\n   * 渲染类型的枚举\n   */\n  public static RenderingMode = RenderingMode;\n  /**\n   * 缩放模式的枚举\n   */\n  public static ScaleMode = ScaleMode;\n\n  /**\n   * 创建一个 PAGView 对象\n   * @param mp4Data mp4数据\n   * @param canvas 渲染画板\n   * @param options 渲染选项\n   * @returns PAGView 对象\n   */\n  public static create(mp4Data: Mp4Data, canvas: HTMLCanvasElement, options: RenderOptions): PAGView {\n    const pagView = new PAGView(mp4Data, canvas, options);\n    pagView.supportWebGL = detectWebGLContext();\n    pagView.videoAttributes = getVideoAttributes(pagView.mp4Data);\n    pagView.eventManager = new EventManager();\n    pagView.canvas = canvas;\n    pagView.videoEl = document.createElement('video');\n    pagView.videoEl.style.display = 'none';\n    pagView.videoEl.muted = true;\n    pagView.videoEl.playsInline = true;\n    const blob = new Blob([mp4Data.data], { type: 'video/mp4' });\n    pagView.videoEl.src = URL.createObjectURL(blob);\n    if (!!mp4Data.mp4Info.width) {\n      pagView.videoAttributes.mp4Width = mp4Data.mp4Info.width;\n    }\n    if (!!mp4Data.mp4Info.height) {\n      pagView.videoAttributes.mp4Height = mp4Data.mp4Info.height;\n    }\n\n    pagView.videoEl.addEventListener('play', () => {\n      pagView.flushLoop(pagView, pagView.videoEl);\n    });\n    pagView.videoEl.addEventListener('pause', () => {\n      pagView.clearRenderTimer();\n    });\n    pagView.videoEl.addEventListener('ended', () => {\n      // 无限循环\n      if (pagView.repeatCount < 0) {\n        pagView.videoEl.play();\n        pagView.eventManager.emit('onAnimationRepeat');\n        return;\n      }\n      // 循环结束\n      if (pagView.repeatCount === 0) {\n        pagView.videoEl.currentTime = 0;\n        pagView.clearRenderTimer();\n        pagView.clearRender();\n        pagView.playing = false;\n        pagView.eventManager.emit('onAnimationEnd');\n        return;\n      }\n      // 次数循环\n      pagView.repeatCount -= 1;\n      pagView.videoEl.play();\n      pagView.eventManager.emit('onAnimationRepeat');\n    });\n\n    pagView.setRenderingMode(pagView.renderingMode);\n    pagView.setScaleMode(options.scaleMode);\n    if (pagView.renderingMode === RenderingMode.WebGL) pagView.loadWithWebGL();\n    if (pagView.renderingMode === RenderingMode.Canvas) pagView.loadWithCanvas();\n    return pagView;\n  }\n\n  private canvas: HTMLCanvasElement;\n  private supportWebGL: boolean;\n  private videoEl: HTMLVideoElement;\n  private videoAttributes: AlphaVideoAttributes;\n  private mp4Data: Mp4Data;\n  private renderingMode: RenderingMode;\n  private context2D: CanvasRenderingContext2D;\n  private gl: WebGLRenderingContext;\n  private program: WebGLProgram;\n  private positionLocation = 0;\n  private texcoordLocation = 0;\n  private alphaStartLocation: WebGLUniformLocation;\n  private scaleLocation: WebGLUniformLocation;\n  private positionBuffer: WebGLBuffer;\n  private texcoordBuffer: WebGLBuffer;\n  private renderTimer: number | null = null;\n  private renderCanvas2D: HTMLCanvasElement;\n  private renderCanvas2DContext: CanvasRenderingContext2D;\n  private playing = false;\n  private destroyed = false;\n  private repeatCount = 0; // 设置动画重复的次数。默认值为 0，只播放一次。如为 -1 动画则无限播放。\n  private eventManager: EventManager;\n  private viewScaleMode: ScaleMode;\n  private viewportSize = { x: 0, y: 0, width: 0, height: 0, scaleX: 1, scaleY: 1 }; // viewport尺寸 WebGL坐标轴轴心在左下角|Canvas2D坐标轴轴心在左上角\n\n  constructor(mp4Data: Mp4Data, canvas: HTMLCanvasElement, options: RenderOptions) {\n    this.canvas = canvas;\n    this.mp4Data = mp4Data;\n    this.renderingMode = options.renderingMode || RenderingMode.WebGL;\n    if (options.repeatCount !== undefined) {\n      this.repeatCount = options.repeatCount < 0 ? -1 : options.repeatCount - 1;\n    }\n  }\n\n  /**\n   * 开始播放\n   */\n  public play() {\n    if (this.destroyed) Log.error(ErrorCode.PagDestroyed);\n    if (!!this.playing) return;\n    this.videoEl.play();\n    this.playing = true;\n    this.eventManager.emit('onAnimationStart');\n  }\n  /**\n   * 暂停播放\n   */\n  public pause() {\n    if (this.destroyed) Log.error(ErrorCode.PagDestroyed);\n    if (!this.playing) return;\n    this.videoEl.pause();\n    this.playing = false;\n    this.eventManager.emit('onAnimationCancel');\n  }\n  /**\n   * 停止播放\n   */\n  public stop() {\n    if (this.destroyed) Log.error(ErrorCode.PagDestroyed);\n    this.videoEl.pause();\n    this.videoEl.currentTime = 0;\n    this.clearRender();\n    this.playing = false;\n    this.eventManager.emit('onAnimationCancel');\n  }\n  /**\n   * 销毁播放实例\n   */\n  public destroy() {\n    if (this.destroyed) return;\n    this.stop();\n    this.canvas = null;\n    this.videoEl = null;\n    this.destroyed = true;\n  }\n  /**\n   * 是否播放中\n   */\n  public isPlaying() {\n    return this.playing;\n  }\n  /**\n   * 是否已经销毁\n   */\n  public isDestroyed() {\n    return this.destroyed;\n  }\n  /**\n   * 动画持续时间\n   */\n  public duration() {\n    return this.videoEl.duration;\n  }\n  /**\n   * 设置动画重复的次数。默认值为 1，只播放一次。如为 0 动画则无限播放。\n   */\n  public setRepeatCount(repeatCount = 1) {\n    this.repeatCount = repeatCount < 0 ? -1 : repeatCount - 1;\n  }\n  /**\n   * 返回当前播放进度位置，取值范围为 0.0 到 1.0。\n   */\n  public getProgress() {\n    return Math.round((this.videoEl.currentTime / this.videoEl.duration) * 100) / 100;\n  }\n  /**\n   * 设置播放进度位置，取值范围为 0.0 到 1.0。\n   */\n  public setProgress(progress: number) {\n    if (this.destroyed) Log.error(ErrorCode.PagDestroyed);\n    if (progress < 0 || progress > 1) Log.error(ErrorCode.InvalidPercentage);\n    if (this.playing) this.pause();\n    this.videoEl.currentTime = progress * this.videoEl.duration;\n    return new Promise((resolve) => {\n      const timeupdateCallback = () => {\n        this.flush(this.videoEl);\n        this.videoEl.removeEventListener('timeupdate', timeupdateCallback);\n        resolve(true);\n      };\n      this.videoEl.addEventListener('timeupdate', timeupdateCallback);\n    });\n  }\n  /**\n   * 渲染当前进度画面\n   */\n  public flush(videoEl: HTMLVideoElement) {\n    this.eventManager.emit(EventName.beforeFlush);\n    if (this.renderingMode === RenderingMode.WebGL) {\n      this.renderWithWebGL(videoEl);\n    } else {\n      this.renderWithCanvas(videoEl);\n    }\n    this.eventManager.emit(EventName.afterFlush);\n  }\n  /**\n   * 增加事件监听\n   */\n  public addListener(eventName: string, listener: Listener) {\n    return this.eventManager.on(eventName, listener);\n  }\n  /**\n   * 移除事件监听\n   */\n  public removeListener(eventName: string, listener?: Listener) {\n    return this.eventManager.off(eventName, listener);\n  }\n  /**\n   * 返回当前缩放模式\n   */\n  public scaleMode() {\n    return this.viewScaleMode;\n  }\n  /**\n   * 指定缩放内容的模式\n   */\n  public setScaleMode(scaleMode: ScaleMode = ScaleMode.LetterBox) {\n    this.viewScaleMode = scaleMode;\n    switch (scaleMode) {\n      case ScaleMode.None:\n        this.viewportSize = {\n          x: this.videoAttributes.position.x,\n          y:\n            this.renderingMode === RenderingMode.WebGL\n              ? this.gl.canvas.height - this.videoAttributes.position.y - this.videoAttributes.videoHeight\n              : this.videoAttributes.position.y,\n          width: this.videoAttributes.videoWidth,\n          height: this.videoAttributes.videoHeight,\n          scaleX: 1,\n          scaleY: 1,\n        };\n        break;\n      case ScaleMode.Stretch:\n        {\n          const scaleX = this.canvas.width / this.videoAttributes.width;\n          const scaleY = this.canvas.height / this.videoAttributes.height;\n          this.viewportSize = {\n            x: this.videoAttributes.position.x * scaleX,\n            y:\n              this.renderingMode === RenderingMode.WebGL\n                ? this.canvas.height -\n                  this.videoAttributes.position.y * scaleY -\n                  this.videoAttributes.videoHeight * scaleY\n                : this.videoAttributes.position.y * scaleY,\n            width: this.videoAttributes.videoWidth * scaleX,\n            height: this.videoAttributes.videoHeight * scaleY,\n            scaleX,\n            scaleY,\n          };\n        }\n        break;\n      case ScaleMode.LetterBox:\n        {\n          const scaleX = this.canvas.width / this.videoAttributes.width;\n          const scaleY = this.canvas.height / this.videoAttributes.height;\n          const scale = Math.min(scaleX, scaleY);\n          this.viewportSize = {\n            x: (this.canvas.width - this.videoAttributes.width * scale) / 2 + this.videoAttributes.position.x * scale,\n            y:\n              this.renderingMode === RenderingMode.WebGL\n                ? this.canvas.height -\n                  (this.canvas.height - this.videoAttributes.height * scale) / 2 -\n                  this.videoAttributes.position.y * scale -\n                  this.videoAttributes.videoHeight * scale\n                : (this.canvas.height - this.videoAttributes.height * scale) / 2 +\n                  this.videoAttributes.position.y * scale,\n            width: this.videoAttributes.videoWidth * scale,\n            height: this.videoAttributes.videoHeight * scale,\n            scaleX: scale,\n            scaleY: scale,\n          };\n        }\n        break;\n      case ScaleMode.Zoom:\n        {\n          const scaleX = this.canvas.width / this.videoAttributes.width;\n          const scaleY = this.canvas.height / this.videoAttributes.height;\n          const scale = Math.max(scaleX, scaleY);\n          this.viewportSize = {\n            x: (this.canvas.width - this.videoAttributes.width * scale) / 2 + this.videoAttributes.position.x * scale,\n            y:\n              this.renderingMode === RenderingMode.WebGL\n                ? this.canvas.height -\n                  (this.canvas.height - this.videoAttributes.height * scale) / 2 -\n                  this.videoAttributes.position.y * scale -\n                  this.videoAttributes.videoHeight * scale\n                : (this.canvas.height - this.videoAttributes.height * scale) / 2 +\n                  this.videoAttributes.position.y * scale,\n            width: this.videoAttributes.videoWidth * scale,\n            height: this.videoAttributes.videoHeight * scale,\n            scaleX: scale,\n            scaleY: scale,\n          };\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private clearRender() {\n    if (this.destroyed) Log.error(ErrorCode.PagDestroyed);\n\n    if (this.renderingMode === RenderingMode.WebGL) {\n      this.clearRenderWithWebGL();\n    } else {\n      this.clearRenderWithCanvas();\n    }\n  }\n\n  private setRenderingMode(renderingMode: RenderingMode) {\n    if (renderingMode === RenderingMode.WebGL) {\n      if (this.supportWebGL === false) {\n        this.renderingMode = RenderingMode.Canvas;\n        this.setRenderingMode(RenderingMode.Canvas);\n        return;\n      }\n      if (!this.gl) {\n        this.gl = this.canvas.getContext('webgl', {});\n      }\n      if (!this.gl) {\n        this.renderingMode = RenderingMode.Canvas;\n        this.setRenderingMode(RenderingMode.Canvas);\n      } else {\n        if (!!this.videoAttributes.hasAlpha) {\n          this.program = createProgram(\n            this.gl,\n            getShaderSourceFromString(VERTEX_2D_SHADER),\n            getShaderSourceFromString(FRAGMENT_2D_SHADER_TRANSPARENT),\n          );\n        } else {\n          this.program = createProgram(\n            this.gl,\n            getShaderSourceFromString(VERTEX_2D_SHADER),\n            getShaderSourceFromString(FRAGMENT_2D_SHADER),\n          );\n        }\n      }\n    } else {\n      this.context2D = this.canvas.getContext('2d');\n    }\n  }\n\n  private loadWithWebGL() {\n    // look up where the vertex data needs to go.\n    this.positionLocation = this.gl.getAttribLocation(this.program, 'a_position');\n    if (this.positionLocation === -1) throw new Error('unable to get attribute location for a_position');\n\n    this.scaleLocation = this.gl.getUniformLocation(this.program, 'u_scale');\n    if (this.scaleLocation === -1) throw new Error('unable to get attribute location for u_scale');\n\n    this.texcoordLocation = this.gl.getAttribLocation(this.program, 'a_texCoord');\n    if (this.texcoordLocation === -1) throw new Error('unable to get attribute location for a_texCoord');\n\n    this.alphaStartLocation = this.gl.getUniformLocation(this.program, 'v_alphaStart');\n    if (this.alphaStartLocation === -1) throw new Error('unable to get attribute location for v_alphaStart');\n\n    // Create a buffer to put three 2d clip space points in\n    this.positionBuffer = this.gl.createBuffer();\n\n    // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n    // Set a rectangle the same size as the image.\n    this.setRectangle(this.gl, 0, 0, this.videoAttributes.mp4Width, this.videoAttributes.mp4Height);\n\n    // provide texture coordinates for the rectangle.\n    this.texcoordBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);\n\n    // Create a texture.\n    const texture: WebGLTexture = this.gl.createTexture();\n    this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n    // Set the parameters so we can render any size video.\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      new Float32Array([\n        0 + 0.5 / this.videoAttributes.mp4Width,\n        0.0 + 0.5 / this.videoAttributes.mp4Height,\n        1.0 - 0.5 / this.videoAttributes.mp4Width,\n        0.0 + 0.5 / this.videoAttributes.mp4Height,\n        0.0 + 0.5 / this.videoAttributes.mp4Width,\n        1.0 - 0.5 / this.videoAttributes.mp4Height,\n        0.0 + 0.5 / this.videoAttributes.mp4Width,\n        1.0 - 0.5 / this.videoAttributes.mp4Height,\n        1.0 - 0.5 / this.videoAttributes.mp4Width,\n        0.0 + 0.5 / this.videoAttributes.mp4Height,\n        1.0 - 0.5 / this.videoAttributes.mp4Width,\n        1.0 - 0.5 / this.videoAttributes.mp4Height,\n      ]),\n      this.gl.STATIC_DRAW,\n    );\n  }\n\n  private loadWithCanvas() {\n    this.renderCanvas2D = document.createElement('canvas');\n    this.renderCanvas2D.width =\n      this.videoAttributes.mp4Width * this.videoAttributes.sequenceScale.width * this.viewportSize.scaleX;\n    this.renderCanvas2D.height =\n      this.videoAttributes.mp4Height * this.videoAttributes.sequenceScale.height * this.viewportSize.scaleY;\n    this.renderCanvas2DContext = this.renderCanvas2D.getContext('2d');\n  }\n\n  private setRectangle(gl: WebGLRenderingContext, x: number, y: number, width: number, height: number) {\n    const x1: number = x;\n    const x2: number = x + width;\n    const y1: number = y;\n    const y2: number = y + height;\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]), gl.STATIC_DRAW);\n  }\n\n  private flushLoop(pagView: PAGView, videoEl: HTMLVideoElement) {\n    pagView.flush(videoEl);\n    this.renderTimer = window.requestAnimationFrame(() => {\n      this.flushLoop(pagView, videoEl);\n    });\n  }\n\n  private renderWithWebGL(videoEl: HTMLVideoElement) {\n    // Upload the video into the texture.\n    this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, videoEl);\n\n    // lookup uniforms\n    const resolutionLocation = this.gl.getUniformLocation(this.program, 'u_resolution');\n\n    // Tell WebGL how to convert from clip space to pixels\n    this.gl.viewport(this.viewportSize.x, this.viewportSize.y, this.viewportSize.width, this.viewportSize.height);\n\n    // Clear the canvas\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    // Tell it to use our program (pair of shaders)\n    this.gl.useProgram(this.program);\n\n    // Turn on the position attribute\n    this.gl.enableVertexAttribArray(this.positionLocation);\n\n    // Bind the position buffer\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n    // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n    const size = 2; // 2 components per iteration\n    const type: number = this.gl.FLOAT; // the data is 32bit floats\n    const normalize = false; // don't normalize the data\n    const stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\n    const offset = 0; // start at the beginning of the buffer\n    this.gl.vertexAttribPointer(this.positionLocation, size, type, normalize, stride, offset);\n\n    // Turn on the teccord attribute\n    this.gl.enableVertexAttribArray(this.texcoordLocation);\n\n    // Bind the position buffer.\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);\n\n    this.gl.vertexAttribPointer(this.texcoordLocation, size, type, normalize, stride, offset);\n\n    // set the resolution\n    this.gl.uniform2f(resolutionLocation, this.videoAttributes.videoWidth, this.videoAttributes.videoHeight);\n\n    if (!!this.videoAttributes.hasAlpha) {\n      this.gl.uniform2f(\n        this.alphaStartLocation,\n        this.videoAttributes.alphaStartX / this.videoAttributes.mp4Width,\n        this.videoAttributes.alphaStartY / this.videoAttributes.mp4Height,\n      );\n    }\n\n    this.gl.uniform2f(\n      this.scaleLocation,\n      this.videoAttributes.sequenceScale.width,\n      this.videoAttributes.sequenceScale.height,\n    );\n\n    // Draw the rectangle.\n    const primitiveType: number = this.gl.TRIANGLES;\n    const count = 6;\n    this.gl.drawArrays(primitiveType, offset, count);\n  }\n\n  private renderWithCanvas(videoEl: HTMLVideoElement) {\n    if (this.videoAttributes.videoWidth === 0 || this.videoAttributes.videoHeight === 0) {\n      return;\n    }\n    if (!!this.videoAttributes.hasAlpha) {\n      this.renderCanvas2DContext.clearRect(0, 0, this.renderCanvas2D.width, this.renderCanvas2D.height);\n      this.renderCanvas2DContext.drawImage(videoEl, 0, 0, this.renderCanvas2D.width, this.renderCanvas2D.height);\n      const frameOne = this.renderCanvas2DContext.getImageData(0, 0, this.viewportSize.width, this.viewportSize.height);\n      const frameTwo = this.renderCanvas2DContext.getImageData(\n        this.videoAttributes.alphaStartX * this.videoAttributes.sequenceScale.width * this.viewportSize.scaleX,\n        this.videoAttributes.alphaStartY * this.videoAttributes.sequenceScale.height * this.viewportSize.scaleY,\n        this.viewportSize.width,\n        this.viewportSize.height,\n      );\n      const length = frameOne.data.length / 4;\n      for (let i = 0; i < length; i++) {\n        frameOne.data[i * 4 + 3] = frameTwo.data[i * 4 + 0];\n      }\n      this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.context2D.putImageData(\n        frameOne,\n        this.viewportSize.x,\n        this.viewportSize.y,\n        0,\n        0,\n        this.viewportSize.width,\n        this.viewportSize.height,\n      );\n    } else {\n      this.context2D.drawImage(\n        videoEl,\n        0,\n        0,\n        this.videoAttributes.sequenceWidth,\n        this.videoAttributes.sequenceHeight,\n        this.videoAttributes.position.x,\n        this.videoAttributes.position.y,\n        this.videoAttributes.videoWidth,\n        this.videoAttributes.videoHeight,\n      );\n    }\n  }\n\n  private clearRenderWithWebGL() {\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  }\n\n  private clearRenderWithCanvas() {\n    this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private clearRenderTimer() {\n    if (this.renderTimer) {\n      window.cancelAnimationFrame(this.renderTimer);\n      this.renderTimer = null;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}